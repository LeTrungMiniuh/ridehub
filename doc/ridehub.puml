@startuml
title RideHub – 4 Microservices\n(Updated from JDL - DB per service, Central Redis, Single Kafka, OAuth2 via Keycloak)

left to right direction
hide methods
skinparam packageStyle rectangle
skinparam shadowing false
skinparam classAttributeIconSize 0

!theme cyborg
skinparam class {
    BackgroundColor #263238
    BorderColor #00BCD4
    FontColor #E0E0E0
}
skinparam package {
    BackgroundColor #37474F
    BorderColor #00BCD4
    FontColor #E0E0E0
}
skinparam enum {
    BackgroundColor #1B5E20
    BorderColor #4CAF50
    FontColor #E0E0E0
}
skinparam note {
    BackgroundColor #37474F
    BorderColor #00BCD4
    FontColor #E0E0E0
}

' =============================
'              ENUMS
' =============================
' From ms_booking domain enums
enum BookingStatus {
  DRAFT
  AWAITING_PAYMENT
  PAID
  CONFIRMED
  CANCELED
  REFUNDED
  RECOVERY_FAILED_SEAT_LOCKS
}

enum PaymentMethod {
  VNPAY
  CREDIT_CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  INITIATED
  PROCESSING
  SUCCESS
  FAILED
  REFUNDED
  PAYMENT_SUCCESS_BUT_BOOKING_EXPIRED
  REQUIRES_MANUAL_REVIEW
}

' From ms_route domain enums
enum StaffStatus {
  ACTIVE
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum VehicleStatus {
  ACTIVE
  MAINTENANCE
  RETIRED
}

enum VehicleType {
  STANDARD_BUS_VIP
  STANDARD_BUS_NORMAL
  LIMOUSINE
}

enum LockStatus {
  HELD
  EXPIRED
  COMMITTED
}

enum SeatType {
  SLEEPER
  NORMAL
}

' From Avro enums (for cross-service communication)
enum AvroBookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum AvroSeatType {
  ECONOMY
  BUSINESS
  FIRST_CLASS
  VIP
}

enum AvroTicketStatus {
  AVAILABLE
  BOOKED
  CANCELLED
  EXPIRED
}

enum AvroPaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TransportType {
  TRAIN
  BUS
}

' =============================
'      EXTERNAL COMPONENTS
' =============================
class "API Gateway" as GATEWAY
class "Keycloak (OAuth2)" as KEYCLOAK
class "Kafka" as KAFKA
class "Redis" as REDIS
class "MinIO (S3)" as MINIO
class "Elasticsearch" as ELASTIC

' =============================
'        BASE ENTITY
' =============================
abstract class BaseEntity {
  +id: Long
  +createdAt: Instant
  +updatedAt: Instant
  +isDeleted: Boolean
  +deletedAt: Instant
  +deletedBy: UUID
}

' =============================
'          MS-USER
' =============================
package "ms-user\n(Identity & Profile)" as MS_USER {

  class AppUser extends BaseEntity {
    +keycloakId: UUID {unique}
    +email: String {unique}
    +phoneNumber: String
    +firstName: String
    +lastName: String
    +dateOfBirth: LocalDate
    +isVerified: Boolean
    +isActive: Boolean
    +lastLoginAt: Instant
  }

  class Profile extends BaseEntity {
    +fullName: String
    +birthDate: LocalDate
  }

  class FileUser extends BaseEntity {
    +bucket: String
    +objectKey: String
    +contentType: String
    +size: Long
  }

  class "UserDB" as USERDB

}

AppUser "1" -- "1" Profile : "has"
Profile "1" o-- "0..1" FileUser : "avatar"
FileUser ..> MINIO : "stored in"

' =============================
'          MS-ROUTE
' =============================
package "ms-route\n(Geography, Routes, Vehicles, Trips, Staff, SeatLock)" as MS_ROUTE {

  ' ----- Vietnam Address Hierarchy -----
  class Province extends BaseEntity {
    +provinceCode: String {unique}
    +name: String
    +nameEn: String
    +fullName: String
    +fullNameEn: String
    +codeName: String
    +administrativeUnitId: Integer
    +administrativeRegionId: Integer
  }

  class District extends BaseEntity {
    +districtCode: String {unique}
    +name: String
    +nameEn: String
    +fullName: String
    +fullNameEn: String
    +codeName: String
    +administrativeUnitId: Integer
  }

  class Ward extends BaseEntity {
    +wardCode: String {unique}
    +name: String
    +nameEn: String
    +fullName: String
    +fullNameEn: String
    +codeName: String
    +administrativeUnitId: Integer
  }

  class Address extends BaseEntity {
    +streetAddress: String
    +latitude: BigDecimal
    +longitude: BigDecimal
  }

  ' ----- Station / Route / Fleet / Trips -----
  class Station extends BaseEntity {
    +name: String
    +phoneNumber: String
    +description: String
    +active: Boolean
  }

  class Route extends BaseEntity {
    +routeCode: String {unique}
    +distanceKm: BigDecimal
  }

  class Vehicle extends BaseEntity {
    +type: VehicleType
    +typeFactor: BigDecimal
    +plateNumber: String {unique}
    +brand: String
    +description: String
    +status: VehicleStatus
  }

  class SeatMap extends BaseEntity {
    +name: String
  }

  class Floor extends BaseEntity {
    +floorNo: Integer
    +priceFactorFloor: BigDecimal
  }

  class Seat extends BaseEntity {
    +seatNo: String
    +rowNo: Integer
    +colNo: Integer
    +priceFactor: BigDecimal
    +type: SeatType
  }

  class Trip extends BaseEntity {
    +tripCode: String {unique}
    +departureTime: Instant
    +arrivalTime: Instant
    +baseFare: BigDecimal
  }

  ' ---- Staff ----
  class Staff extends BaseEntity {
    +name: String
    +age: Integer
    +gender: Gender
    +phoneNumber: String
    +status: StaffStatus
  }

  class Driver extends BaseEntity {
    +licenseClass: String
    +yearsExperience: Integer
  }

  class Attendant extends BaseEntity

  ' ---- SeatLock ----
  class SeatLock extends BaseEntity {
    +seatNo: String
    +userId: Long
    +status: LockStatus
    +expiresAt: Instant
    +idempotencyKey: String {unique}
    +bookingId: Long
  }

  class FileRoute extends BaseEntity {
    +bucket: String
    +objectKey: String
    +contentType: String
    +size: Long
  }

  class "RouteDB" as ROUTEDB

}

' Address hierarchy
Province "1" o-- "0..*" District : "contains"
District "1" o-- "0..*" Ward : "contains"
Ward "1" o-- "0..*" Address : "located in"

' Station & Route
Station "1" -- "1" Address : "located at"
Route "*" -- "1" Station : "origin"
Route "*" -- "1" Station : "destination"

' Vehicle & SeatMap
Vehicle "1" -- "1" SeatMap : "uses"
SeatMap "1" o-- "1..*" Floor : "has floors"
Floor "1" o-- "1..*" Seat : "has seats"

' Trip
Trip "*" -- "1" Route : "on route"
Trip "*" -- "1" Vehicle : "uses vehicle"
Trip "*" -- "1" Driver : "driven by"
Trip "*" -- "0..1" Attendant : "attended by"

' Staff relationships
Driver "1" -- "1" Staff : "is"
Attendant "1" -- "1" Staff : "is"

' SeatLock
SeatLock "*" -- "1" Trip : "for trip"

' File associations
Station "1" o-- "0..1" FileRoute : "stationImg"
Vehicle "1" o-- "0..1" FileRoute : "vehicleImg"
SeatMap "1" o-- "0..1" FileRoute : "seatMapImg"
FileRoute ..> MINIO : "stored in"

' =============================
'          MS-BOOKING
' =============================
package "ms-booking\n(Bookings, Tickets, Payments, Invoices)" as MS_BOOK {

  class Booking extends BaseEntity {
    +bookingCode: String {unique}
    +status: BookingStatus
    +quantity: Integer
    +totalAmount: BigDecimal
    +bookedAt: Instant
    +customerId: UUID
    +idempotencyKey: String
    +tripId: Long
    +lockGroupId: String
    +expiresAt: Instant
    +timeoutMinutes: Integer
  }

  class Ticket extends BaseEntity {
    +ticketCode: String {unique}
    +price: BigDecimal
    +qrCode: String
    +timeFrom: Instant
    +timeTo: Instant
    +checkedIn: Boolean
    +tripId: Long
    +routeId: Long
    +seatId: Long
  }

  class Invoice extends BaseEntity {
    +invoiceNo: String {unique}
    +issuedAt: Instant
    +grossAmount: BigDecimal
    +vatAmount: BigDecimal
    +netAmount: BigDecimal
  }

  class PaymentTransaction extends BaseEntity {
    +transactionId: String {unique}
    +orderRef: String
    +method: PaymentMethod
    +status: PaymentStatus
    +amount: BigDecimal
    +time: Instant
    +gatewayCreateDate: String
    +gatewayNote: String
  }

  class PricingSnapshot extends BaseEntity {
    +baseFare: BigDecimal
    +vehicleFactor: BigDecimal
    +floorFactor: BigDecimal
    +seatFactor: BigDecimal
    +finalPrice: BigDecimal
  }

  class AppliedPromotion extends BaseEntity {
    +promotionId: Long
    +promotionCode: String
    +policyType: String
    +percent: Integer
    +maxOff: BigDecimal
    +discountAmount: BigDecimal
    +appliedAt: Instant
  }

  class PaymentWebhookLog extends BaseEntity {
    +provider: String
    +payloadHash: String {unique}
    +receivedAt: Instant
    +processingStatus: String
  }

  class FileBooking extends BaseEntity {
    +bucket: String
    +objectKey: String
    +contentType: String
    +size: Long
  }

  class PricingService
  class PaymentService

  class "BookingDB" as BOOKDB

}

Booking "1" o-- "1..*" Ticket : "contains"
Booking "1" -- "0..1" Invoice : "has"
Booking "1" -- "0..1" PaymentTransaction : "payment"
Booking "1" o-- "1..*" PricingSnapshot : "pricing snapshots"
Booking "1" o-- "0..*" AppliedPromotion : "applied promos"
PaymentTransaction "1" o-- "0..*" PaymentWebhookLog : "webhooks"
Ticket "1" o-- "0..1" FileBooking : "qrCodeImg"
FileBooking ..> MINIO : "stored in"

' Cross-service references (Ticket stores IDs)
Ticket ..> Trip : "references tripId"
Ticket ..> Route : "references routeId"
Ticket ..> Seat : "references seatId"

' Pricing dependencies
PricingService ..> Trip : "reads baseFare"
PricingService ..> Vehicle : "reads typeFactor"
PricingService ..> Floor : "reads priceFactorFloor"
PricingService ..> Seat : "reads priceFactor"

' =============================
'          MS-PROMOTION
' =============================
package "ms-promotion\n(Promotions & Conditions)" as MS_PROMO {

  class Promotion extends BaseEntity {
    +code: String {unique}
    +description: String
    +startDate: LocalDate
    +endDate: LocalDate
    +usageLimit: Integer
    +usedCount: Integer
  }

  class BuyNGetMFree extends BaseEntity {
    +buyN: Integer
    +getM: Integer
  }

  class PercentOffTotal extends BaseEntity {
    +percent: Integer [1..100]
    +maxOff: BigDecimal
    +minPrice: BigDecimal
  }

  class ConditionByRoute extends BaseEntity
  class ConditionByDate extends BaseEntity
  class ConditionByLocation extends BaseEntity

  class ConditionRouteItem extends BaseEntity {
    +routeId: Long
  }

  class ConditionDateItem extends BaseEntity {
    +specificDate: LocalDate
    +weekday: Integer
  }

  class ConditionLocationItem extends BaseEntity {
    +provinceId: Long
    +districtId: Long
    +wardId: Long
  }

  class FilePromotion extends BaseEntity {
    +bucket: String
    +objectKey: String
    +contentType: String
    +size: Long
    +isBanner: Boolean
  }

  class "PromotionDB" as PROMODB

}

Promotion "1" o-- "0..*" BuyNGetMFree : "buyNGetM policies"
Promotion "1" o-- "0..*" PercentOffTotal : "percent off policies"
Promotion "1" o-- "0..*" ConditionByRoute : "route conditions"
Promotion "1" o-- "0..*" ConditionByDate : "date conditions"
Promotion "1" o-- "0..*" ConditionByLocation : "location conditions"
Promotion "1" o-- "0..*" FilePromotion : "images"

ConditionByRoute "1" o-- "0..*" ConditionRouteItem : "items"
ConditionByDate "1" o-- "0..*" ConditionDateItem : "items"
ConditionByLocation "1" o-- "0..*" ConditionLocationItem : "items"

FilePromotion ..> MINIO : "stored in"

' =============================
'     GATEWAY / AUTH / INFRA
' =============================
GATEWAY --> KEYCLOAK : "OAuth2/OIDC"
GATEWAY --> MS_USER  : "/api/users/*"
GATEWAY --> MS_ROUTE : "/api/routes/*, /api/trips/*"
GATEWAY --> MS_BOOK  : "/api/bookings/*"
GATEWAY --> MS_PROMO : "/api/promotions/*"

' Central Redis (namespaced per service)
MS_USER ..>  REDIS : "cache: user:*"
MS_ROUTE ..> REDIS : "cache: route:*, lock: seat:*"
MS_BOOK  ..> REDIS : "cache: booking:*"
MS_PROMO ..> REDIS : "cache: promo:*"

' Kafka event streaming
MS_ROUTE ..> KAFKA : "publish: SeatsReserved, SeatsReleased"
MS_BOOK  ..> KAFKA : "publish: BookingCreated, PaymentSucceeded"
MS_BOOK  ..> KAFKA : "consume: seat events"
MS_ROUTE ..> KAFKA : "consume: booking events"
MS_PROMO ..> KAFKA : "publish: PromoUpdated"
MS_USER  ..> KAFKA : "publish: UserUpdated"

' Elasticsearch for search
MS_ROUTE ..> ELASTIC : "index: Route, Station"

' DB-per-service
MS_USER ..>  USERDB  : "MySQL DB"
MS_ROUTE ..> ROUTEDB : "MySQL DB"
MS_BOOK  ..> BOOKDB  : "MySQL DB"
MS_PROMO ..> PROMODB : "MySQL DB"

' =============================
'            NOTES
' =============================
note bottom of PricingService
  **Ticket Pricing Formula:**
  
  price = Trip.baseFare
    × Vehicle.typeFactor
    × Floor.priceFactorFloor
    × Seat.priceFactor
  
  Then apply promotions from ms-promotion.
  Store final calculation in PricingSnapshot
  to prevent price drift.
end note

note bottom of SeatLock
  **SeatLock Rules:**
  - Composite unique: (tripId, seatNo)
    when status ∈ {HELD, COMMITTED}
  - TTL via expiresAt
  - Background job releases EXPIRED locks
  - Idempotency via idempotencyKey
  - bookingId for audit trail
end note

note bottom of MS_BOOK
  **Saga Pattern (Choreography):**
  
  1. User initiates booking
  2. Booking service: create DRAFT booking
  3. → Reserve seats (SeatLock in ms-route)
  4. ← SeatsReserved event
  5. Update status to AWAITING_PAYMENT
  6. → Initiate payment
  7. ← PaymentSucceeded webhook
  8. Confirm booking, issue tickets
  9. → Commit seat locks
  
  **Rollback scenarios:**
  - Payment timeout/failure → Release seats
  - Webhooks idempotent via payloadHash
end note

note bottom of BaseEntity
  **Soft Delete Pattern:**
  All entities support soft delete:
  - isDeleted flag
  - deletedAt timestamp
  - deletedBy user reference
  
  Default queries filter isDeleted = false
  Consider adding optimistic locking (version field)
end note

note top of KEYCLOAK
  **Keycloak manages:**
  - User authentication
  - Role/permission management
  - JWT token issuance
  - Single Sign-On (SSO)
end note

@enduml
