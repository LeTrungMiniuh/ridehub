@startuml SimplifiedTransportBookingSystem
!theme aws-orange

' ================================
' Value Objects & Common Types
' ================================
class Money {
  - amount: BigDecimal
  - currency: String  ' default: VND
}

class GeoPoint {
  - latitude: BigDecimal
  - longitude: BigDecimal
}

class ContactInfo {
  - phone: String
  - email: String
}

' ================================
' Enums
' ================================
enum TransportType {
  BUS
  TRAIN
  FERRY
}

enum SeatType {
  BERTH_LOWER
  BERTH_UPPER
  SEAT_STANDARD
  SEAT_VIP
  WHEELCHAIR_ACCESSIBLE
}

enum BookingStatus {
  DRAFT
  PENDING_PAYMENT
  CONFIRMED
  CHECKED_IN
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

' ================================
' Vietnam Administrative Hierarchy
' ================================
package "Location Domain" {
  class Province {
    - id: UUID
    - code: String
    - name: String
    - nameEn: String
    - region: String  ' North, Central, South
  }

  class District {
    - id: UUID
    - provinceId: UUID
    - code: String
    - name: String
    - nameEn: String
    - type: String  ' Quận, Huyện, Thị xã, Thành phố
  }

  class Ward {
    - id: UUID
    - districtId: UUID
    - code: String
    - name: String
    - nameEn: String
    - type: String  ' Phường, Xã, Thị trấn
  }

  class Address {
    - id: UUID
    - wardId: UUID
    - streetAddress: String
    - postalCode: String
    - geoPoint: GeoPoint
    - landmark: String
  }

  Province ||--o{ District
  District ||--o{ Ward
  Ward ||--o{ Address
}

' ================================
' API Gateway
' ================================
package "API Gateway (Port 8080)" {
  class Gateway {
    + JWT Authentication
    + Rate Limiting
    + Request Routing
    + API Versioning
    + CORS Handling
    + Request Validation
    + Response Caching
  }

  class SecurityService {
    + OAuth2 Integration
    + Role-based Access Control
    + API Key Management
    + Audit Logging
  }
}

' ================================
' Service 1: User Management Service
' ================================
package "User Service (Port 8081)" {
  class User {
    - id: UUID
    - username: String
    - email: String
    - phoneNumber: String
    - firstName: String
    - lastName: String
    - dateOfBirth: LocalDate
    - idNumber: String
    - nationality: String
    - profileImage: String
    - isVerified: Boolean
    - isActive: Boolean
    - createdAt: Instant
    - lastLoginAt: Instant
  }

  class UserPreferences {
    - userId: UUID
    - preferredLanguage: String
    - emailNotifications: Boolean
    - smsNotifications: Boolean
    - pushNotifications: Boolean
    - contactInfo: ContactInfo
  }

  User ||--|| UserPreferences
}

' ================================
' Service 2: Transport Service (Consolidated)
' ================================
package "Transport Service (Port 8082)" {
  class Operator {
    - id: UUID
    - name: String
    - businessLicense: String
    - logoUrl: String
    - rating: Double
    - contactInfo: ContactInfo
    - isActive: Boolean
  }

  class Station {
    - id: UUID
    - code: String
    - name: String
    - nameEn: String
    - addressId: UUID
    - facilities: String
    - operatingHours: String
    - isActive: Boolean
  }

  class Route {
    - id: UUID
    - operatorId: UUID
    - originStationId: UUID
    - destinationStationId: UUID
    - transportType: TransportType
    - distance: BigDecimal
    - estimatedDuration: Integer
    - basePrice: Money
    - isActive: Boolean
  }

  class Trip {
    - id: UUID
    - routeId: UUID
    - vehicleId: UUID
    - departureTime: Instant
    - arrivalTime: Instant
    - availableSeats: Integer
    - totalSeats: Integer
    - status: String
    - driverId: UUID
  }

  class Vehicle {
    - id: UUID
    - operatorId: UUID
    - homeStationId: UUID
    - plateNumber: String
    - model: String
    - capacity: Integer
    - seatLayout: String
    - amenities: String
    - imageUrls: String
    - averageRating: Double
    - totalReviews: Integer
    - isActive: Boolean
    - yearManufactured: Integer
    - lastMaintenanceDate: LocalDate
  }

  class VehicleImage {
    - id: UUID
    - vehicleId: UUID
    - imageUrl: String
    - imageType: String  ' EXTERIOR, INTERIOR, SEAT_LAYOUT
    - description: String
    - isPrimary: Boolean
    - uploadedAt: Instant
  }

  class VehicleReview {
    - id: UUID
    - vehicleId: UUID
    - userId: UUID
    - tripId: UUID
    - rating: Integer  ' 1-5 stars
    - comment: String
    - cleanliness: Integer
    - comfort: Integer
    - punctuality: Integer
    - staffService: Integer
    - createdAt: Instant
    - isVerified: Boolean
  }

  class Seat {
    - id: UUID
    - tripId: UUID
    - seatNumber: String
    - seatType: SeatType
    - deck: String
    - priceModifier: BigDecimal
    - isAvailable: Boolean
  }

  Operator ||--o{ Vehicle
  Operator ||--o{ Route
  Station }o--|| Address
  Station ||--o{ Vehicle : homeStation
  Route }o--|| Station : origin
  Route }o--|| Station : destination
  Route ||--o{ Trip
  Vehicle ||--o{ Trip
  Vehicle ||--o{ VehicleImage
  Vehicle ||--o{ VehicleReview
  Vehicle ||--|| ReviewSummary
  Vehicle ||--o{ VehicleAmenity
  Trip ||--o{ Seat
}

' ================================
' Service 3: Booking Service (Consolidated)
' ================================
package "Booking Service (Port 8083)" {
  class Booking {
    - id: UUID
    - userId: UUID
    - tripId: UUID
    - bookingReference: String
    - status: BookingStatus
    - totalAmount: Money
    - contactInfo: ContactInfo
    - specialRequests: String
    - createdAt: Instant
    - expiresAt: Instant
  }

  class Passenger {
    - id: UUID
    - bookingId: UUID
    - seatId: UUID
    - firstName: String
    - lastName: String
    - idNumber: String
    - dateOfBirth: LocalDate
    - nationality: String
    - ticketNumber: String
  }

  class BookingHistory {
    - id: UUID
    - bookingId: UUID
    - previousStatus: BookingStatus
    - newStatus: BookingStatus
    - reason: String
    - changedBy: UUID
    - changedAt: Instant
  }

  Booking ||--o{ Passenger
  Booking ||--o{ BookingHistory
  Passenger }o--|| Seat
}

' ================================
' Service 4: Payment Service (Consolidated)
' ================================
package "Payment Service (Port 8084)" {
  class Payment {
    - id: UUID
    - bookingId: UUID
    - userId: UUID
    - amount: Money
    - paymentMethod: String
    - status: PaymentStatus
    - gatewayTransactionId: String
    - gatewayResponse: String
    - paidAt: Instant
    - refundableUntil: Instant
  }

  class PaymentMethod {
    - id: UUID
    - userId: UUID
    - type: String
    - provider: String
    - maskedDetails: String
    - isDefault: Boolean
    - expiresAt: LocalDate
  }

  class Refund {
    - id: UUID
    - paymentId: UUID
    - amount: Money
    - reason: String
    - status: String
    - processedAt: Instant
    - gatewayRefundId: String
  }

  Payment }o--|| Booking
  Payment ||--o{ Refund
  User ||--o{ PaymentMethod
}

' ================================
' Service 5: Notification Service (Consolidated)
' ================================
package "Notification Service (Port 8085)" {
  class NotificationTemplate {
    - id: UUID
    - type: String
    - language: String
    - subject: String
    - emailBody: String
    - smsTemplate: String
    - pushTemplate: String
  }

  class Notification {
    - id: UUID
    - recipientId: UUID
    - templateId: UUID
    - channel: String  ' EMAIL, SMS, PUSH
    - content: String
    - metadata: String
    - sentAt: Instant
    - deliveredAt: Instant
    - readAt: Instant
    - status: String
    - bookingId: UUID  ' optional reference
  }

  NotificationTemplate ||--o{ Notification
  User ||--o{ Notification
}

' ================================
' Infrastructure Components
' ================================
cloud "Message Queue" {
  component Kafka [
    Apache Kafka
    Event Streaming
  ]
}

database "Primary Database" {
  component PostgreSQL [
    PostgreSQL
    ACID Transactions
  ]
}

database "Cache Layer" {
  component Redis [
    Redis
    Session & Cache
  ]
}

database "Search Engine" {
  component Elasticsearch [
    Elasticsearch
    Route Search
  ]
}

cloud "File Storage" {
  component MinIO [
    MinIO S3
    Document Storage
  ]
}

cloud "Monitoring" {
  component Observability [
    Prometheus
    Grafana
    Jaeger
  ]
}

' ================================
' Service Relationships
' ================================
Gateway --> User : routes
Gateway --> Transport : routes
Gateway --> Booking : routes
Gateway --> Payment : routes
Gateway --> Notification : routes

' Cross-service dependencies
Booking ..> User : userId
Booking ..> Trip : tripId
Payment ..> Booking : bookingId
Notification ..> User : recipientId
Notification ..> Booking : bookingId
VehicleReview ..> User : userId
VehicleReview ..> Trip : tripId

' Database connections
User --> PostgreSQL
Transport --> PostgreSQL
Booking --> PostgreSQL
Payment --> PostgreSQL
Notification --> PostgreSQL

' Cache connections
User --> Redis
Booking --> Redis
Payment --> Redis

' Search connections
Transport --> Elasticsearch

' File storage for images
VehicleImage --> MinIO
User --> MinIO : profile images

' Event streaming
Booking --> Kafka : booking events
Payment --> Kafka : payment events
Notification --> Kafka : notification events
VehicleReview --> Kafka : review events

' Monitoring
Gateway --> Observability
User --> Observability
Transport --> Observability
Booking --> Observability
Payment --> Observability
Notification --> Observability
@enduml