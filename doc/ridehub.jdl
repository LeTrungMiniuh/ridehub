// ======================================================
// Enums (Keycloak owns roles)
// ======================================================
enum BookingStatus { DRAFT, AWAITING_PAYMENT, PAID, CONFIRMED, CANCELED, REFUNDED }
enum PaymentMethod { VNPAY, MOMO, ZALOPAY, CREDIT_CARD, BANK_TRANSFER }
enum PaymentStatus { INITIATED, PROCESSING, SUCCESS, FAILED, REFUNDED }
enum StaffStatus { ACTIVE, INACTIVE }
enum Gender { MALE, FEMALE, OTHER }
enum VehicleType { STANDARD_BUS, LIMOUSINE }

// ======================================================
// Applications
// ======================================================
application {
  config {
    baseName gateway
    packageName com.ridehub.gateway
    applicationType gateway
    authenticationType oauth2
    databaseType no
    serviceDiscoveryType consul
    serverPort 8080
    enableSwaggerCodegen true
  }
}

application {
  config {
    baseName ms_user
    packageName com.ridehub.user
    applicationType microservice
    authenticationType oauth2
    databaseType sql
    devDatabaseType mysql
    prodDatabaseType mysql
    cacheProvider redis
    serviceDiscoveryType consul
    serverPort 8081
    enableSwaggerCodegen true
  }
  entities AppUser, Profile
}

application {
  config {
    baseName ms_route
    packageName com.ridehub.route
    applicationType microservice
    authenticationType oauth2
    databaseType sql
    devDatabaseType mysql
    prodDatabaseType mysql
    messageBroker kafka
    searchEngine elasticsearch
    cacheProvider redis
    serviceDiscoveryType consul
    serverPort 8082
    enableSwaggerCodegen true
  }
  entities Province, District, Ward, Address, Station, Route, Vehicle, SeatMap, Floor, Seat, Trip, TripSeat, Staff, Driver, Attendant
}

application {
  config {
    baseName ms_booking
    packageName com.ridehub.booking
    applicationType microservice
    authenticationType oauth2
    databaseType sql
    devDatabaseType mysql
    prodDatabaseType mysql
    messageBroker kafka
    cacheProvider redis
    serviceDiscoveryType consul
    serverPort 8083
    enableSwaggerCodegen true
  }
  entities Booking, Ticket, Invoice, PaymentTransaction, AppliedPromotion
}

application {
  config {
    baseName ms_promotion
    packageName com.ridehub.promotion
    applicationType microservice
    authenticationType oauth2
    databaseType sql
    devDatabaseType mysql
    prodDatabaseType mysql
    messageBroker kafka
    cacheProvider redis
    serviceDiscoveryType consul
    serverPort 8084
    enableSwaggerCodegen true
  }
  entities Promotion, BuyNGetMFree, PercentOffTotal, ConditionByRoute, ConditionByDate, ConditionByLocation
}

// ======================================================
// Shared audit/soft-delete fields are inlined
//   createdAt Instant required
//   updatedAt Instant
//   isDeleted Boolean
//   deletedAt Instant
//   deletedBy UUID
// ======================================================

// =============================
// ms_user (Identity & Profile)
// =============================
entity AppUser {
  keycloakId UUID required unique
  email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/) unique
  phoneNumber String
  firstName String
  lastName String
  dateOfBirth LocalDate
  isVerified Boolean
  isActive Boolean required
  lastLoginAt Instant
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity Profile {
  fullName String
  birthDate LocalDate
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

relationship OneToOne {
  AppUser{profile} to Profile{user required}
}

// ================================================
// ms_route (Address, Stations, Routes, Fleet, Trips)
// ================================================
entity Province {
  provinceCode String required
  name String required
  nameEn String
  fullName String
  fullNameEn String
  codeName String
  administrativeUnitId Integer
  administrativeRegionId Integer
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity District {
  districtCode String required
  name String required
  nameEn String
  fullName String
  fullNameEn String
  codeName String
  administrativeUnitId Integer
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity Ward {
  wardCode String required
  name String required
  nameEn String
  fullName String
  fullNameEn String
  codeName String
  administrativeUnitId Integer
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity Address {
  streetAddress String required
  latitude BigDecimal
  longitude BigDecimal
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

relationship OneToMany {
  Province{districts} to District{province required},
  District{wards}     to Ward{district required},
  Ward{addresses}     to Address{ward required}
}

entity Station {
  name String required
  phoneNumber String
  description String
  active Boolean required
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

relationship ManyToOne {
  Station{address required} to Address
}

entity Route {
  routeCode String
  distanceKm BigDecimal
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

relationship ManyToOne {
  Route{origin required}      to Station,
  Route{destination required} to Station
}

entity Vehicle {
  type VehicleType required
  typeFactor BigDecimal
  plateNumber String required unique
  brand String
  description String
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity SeatMap {
  name String required
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity Floor {
  floorNo Integer required
  priceFactorFloor BigDecimal
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity Seat {
  seatNo String required
  row Integer
  col Integer
  priceFactor BigDecimal
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity Trip {
  tripCode String
  departureTime Instant required
  arrivalTime Instant required
  baseFare BigDecimal required
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity TripSeat {
  seatNo String required
  floorNo Integer required
  booked Boolean
  priceFactor BigDecimal
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

relationship ManyToOne {
  Vehicle{seatMap required} to SeatMap,
  Floor{seatMap required}   to SeatMap,
  Seat{floor required}      to Floor,
  Trip{route required}      to Route,
  TripSeat{trip required}   to Trip
}

entity Staff {
  name String required
  age Integer
  gender Gender
  phoneNumber String
  status StaffStatus
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity Driver {
  licenseClass String
  yearsExperience Integer
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity Attendant {
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

relationship OneToOne {
  Trip{driver}    to Driver{trip required}
}
relationship OneToOne {
  Trip{attendant} to Attendant{trip}
}

// =======================================
// ms_booking (Booking, Ticket, Invoice, Tx, AppliedPromotion)
// =======================================
entity Ticket {
  ticketCode String required unique
  price BigDecimal required
  qrCode String
  timeFrom Instant
  timeTo Instant
  checkedIn Boolean
  // cross-service ids (no FK):
  tripId UUID required
  routeId UUID required
  tripSeatId UUID required
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity Booking {
  bookingCode String required unique
  status BookingStatus required
  quantity Integer
  totalAmount BigDecimal required
  createdTime Instant required
  // cross-service id:
  customerId UUID required
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity Invoice {
  invoiceNo String required unique
  issuedAt Instant
  grossAmount BigDecimal
  vatAmount BigDecimal
  netAmount BigDecimal
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity PaymentTransaction {
  transactionId String required unique
  method PaymentMethod
  status PaymentStatus
  amount BigDecimal
  time Instant
  gatewayNote String
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

// New: decoupled join kept INSIDE ms_booking
entity AppliedPromotion {
  promotionId UUID required           // logical ref to ms_promotion.promotion.id
  promotionCode String                // denormalized for audit
  discountAmount BigDecimal required  // computed amount applied
  appliedAt Instant required
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

relationship OneToMany {
  Booking{tickets}          to Ticket{booking required},
  Booking{appliedPromos}    to AppliedPromotion{booking required}
  
}

relationship OneToOne {
  Booking{invoice}            to Invoice{booking required},
  Booking{paymentTransaction} to PaymentTransaction{booking}
}

// ===========================================
// ms_promotion (Promotions & Conditions)
// ===========================================
entity Promotion {
  code String required unique
  description String
  startDate LocalDate
  endDate LocalDate
  usageLimit Integer
  usedCount Integer
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity BuyNGetMFree {
  buyN Integer required
  getM Integer required
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity PercentOffTotal {
  percent Integer required
  maxOff BigDecimal
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity ConditionByRoute {
  routeId UUID required
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity ConditionByDate {
  specificDate LocalDate
  weekday Integer
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

entity ConditionByLocation {
  provinceId UUID
  districtId UUID
  wardId UUID
  createdAt Instant required
  updatedAt Instant
  isDeleted Boolean
  deletedAt Instant
  deletedBy UUID
}

relationship OneToMany {
  Promotion{buyNGetM}      to BuyNGetMFree{promotion required},
  Promotion{percentOff}    to PercentOffTotal{promotion required},
  Promotion{conditionsR}   to ConditionByRoute{promotion required},
  Promotion{conditionsD}   to ConditionByDate{promotion required},
  Promotion{conditionsLoc} to ConditionByLocation{promotion required}
}

// ======================================================
// Microservice mappings
// ======================================================
microservice AppUser, Profile with ms_user
microservice Province, District, Ward, Address, Station, Route, Vehicle, SeatMap, Floor, Seat, Trip, TripSeat, Staff, Driver, Attendant with ms_route
microservice Booking, Ticket, Invoice, PaymentTransaction, AppliedPromotion with ms_booking
microservice Promotion, BuyNGetMFree, PercentOffTotal, ConditionByRoute, ConditionByDate, ConditionByLocation with ms_promotion

// ======================================================
// Global options (use modern 'pagination')
// ======================================================
dto * with mapstruct
service * with serviceImpl
filter *
paginate Route, Trip, Vehicle, Station, Booking, Promotion with infinite-scroll
search Route, Station with elasticsearch


// ======================================================
// Deployment (compose)
// ======================================================
deployment {
  deploymentType docker-compose
  serviceDiscoveryType consul
  monitoring prometheus
  appsFolders [gateway, ms_user, ms_route, ms_booking, ms_promotion]
  dockerRepositoryName "ridehub"
}