package com.ticketsystem.route.domain;

import static com.ticketsystem.route.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class RouteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteAllPropertiesEquals(Route expected, Route actual) {
        assertRouteAutoGeneratedPropertiesEquals(expected, actual);
        assertRouteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteAllUpdatablePropertiesEquals(Route expected, Route actual) {
        assertRouteUpdatableFieldsEquals(expected, actual);
        assertRouteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteAutoGeneratedPropertiesEquals(Route expected, Route actual) {
        assertThat(actual)
            .as("Verify Route auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteUpdatableFieldsEquals(Route expected, Route actual) {
        assertThat(actual)
            .as("Verify Route relevant properties")
            .satisfies(a -> assertThat(a.getTransportType()).as("check transportType").isEqualTo(expected.getTransportType()))
            .satisfies(a ->
                assertThat(a.getDistance()).as("check distance").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getDistance())
            )
            .satisfies(a -> assertThat(a.getEstimatedDuration()).as("check estimatedDuration").isEqualTo(expected.getEstimatedDuration()))
            .satisfies(a ->
                assertThat(a.getBasePrice()).as("check basePrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getBasePrice())
            )
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteUpdatableRelationshipsEquals(Route expected, Route actual) {
        assertThat(actual)
            .as("Verify Route relationships")
            .satisfies(a -> assertThat(a.getOrigin()).as("check origin").isEqualTo(expected.getOrigin()))
            .satisfies(a -> assertThat(a.getDestination()).as("check destination").isEqualTo(expected.getDestination()))
            .satisfies(a -> assertThat(a.getOperator()).as("check operator").isEqualTo(expected.getOperator()));
    }
}
