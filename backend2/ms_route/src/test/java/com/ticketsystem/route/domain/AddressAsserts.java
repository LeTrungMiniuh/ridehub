package com.ticketsystem.route.domain;

import static com.ticketsystem.route.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class AddressAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAddressAllPropertiesEquals(Address expected, Address actual) {
        assertAddressAutoGeneratedPropertiesEquals(expected, actual);
        assertAddressAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAddressAllUpdatablePropertiesEquals(Address expected, Address actual) {
        assertAddressUpdatableFieldsEquals(expected, actual);
        assertAddressUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAddressAutoGeneratedPropertiesEquals(Address expected, Address actual) {
        assertThat(actual)
            .as("Verify Address auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAddressUpdatableFieldsEquals(Address expected, Address actual) {
        assertThat(actual)
            .as("Verify Address relevant properties")
            .satisfies(a -> assertThat(a.getWardCode()).as("check wardCode").isEqualTo(expected.getWardCode()))
            .satisfies(a -> assertThat(a.getStreetAddress()).as("check streetAddress").isEqualTo(expected.getStreetAddress()))
            .satisfies(a -> assertThat(a.getPostalCode()).as("check postalCode").isEqualTo(expected.getPostalCode()))
            .satisfies(a ->
                assertThat(a.getLatitude()).as("check latitude").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getLatitude())
            )
            .satisfies(a ->
                assertThat(a.getLongitude()).as("check longitude").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getLongitude())
            )
            .satisfies(a -> assertThat(a.getLandmark()).as("check landmark").isEqualTo(expected.getLandmark()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAddressUpdatableRelationshipsEquals(Address expected, Address actual) {
        assertThat(actual)
            .as("Verify Address relationships")
            .satisfies(a -> assertThat(a.getWard()).as("check ward").isEqualTo(expected.getWard()));
    }
}
