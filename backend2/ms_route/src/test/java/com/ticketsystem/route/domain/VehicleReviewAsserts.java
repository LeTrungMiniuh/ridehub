package com.ticketsystem.route.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VehicleReviewAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleReviewAllPropertiesEquals(VehicleReview expected, VehicleReview actual) {
        assertVehicleReviewAutoGeneratedPropertiesEquals(expected, actual);
        assertVehicleReviewAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleReviewAllUpdatablePropertiesEquals(VehicleReview expected, VehicleReview actual) {
        assertVehicleReviewUpdatableFieldsEquals(expected, actual);
        assertVehicleReviewUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleReviewAutoGeneratedPropertiesEquals(VehicleReview expected, VehicleReview actual) {
        assertThat(actual)
            .as("Verify VehicleReview auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleReviewUpdatableFieldsEquals(VehicleReview expected, VehicleReview actual) {
        assertThat(actual)
            .as("Verify VehicleReview relevant properties")
            .satisfies(a -> assertThat(a.getUserId()).as("check userId").isEqualTo(expected.getUserId()))
            .satisfies(a -> assertThat(a.getTripId()).as("check tripId").isEqualTo(expected.getTripId()))
            .satisfies(a -> assertThat(a.getRating()).as("check rating").isEqualTo(expected.getRating()))
            .satisfies(a -> assertThat(a.getComment()).as("check comment").isEqualTo(expected.getComment()))
            .satisfies(a -> assertThat(a.getCleanliness()).as("check cleanliness").isEqualTo(expected.getCleanliness()))
            .satisfies(a -> assertThat(a.getComfort()).as("check comfort").isEqualTo(expected.getComfort()))
            .satisfies(a -> assertThat(a.getPunctuality()).as("check punctuality").isEqualTo(expected.getPunctuality()))
            .satisfies(a -> assertThat(a.getStaffService()).as("check staffService").isEqualTo(expected.getStaffService()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getIsVerified()).as("check isVerified").isEqualTo(expected.getIsVerified()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleReviewUpdatableRelationshipsEquals(VehicleReview expected, VehicleReview actual) {
        assertThat(actual)
            .as("Verify VehicleReview relationships")
            .satisfies(a -> assertThat(a.getVehicle()).as("check vehicle").isEqualTo(expected.getVehicle()));
    }
}
