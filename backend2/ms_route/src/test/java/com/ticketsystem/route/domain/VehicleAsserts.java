package com.ticketsystem.route.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VehicleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleAllPropertiesEquals(Vehicle expected, Vehicle actual) {
        assertVehicleAutoGeneratedPropertiesEquals(expected, actual);
        assertVehicleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleAllUpdatablePropertiesEquals(Vehicle expected, Vehicle actual) {
        assertVehicleUpdatableFieldsEquals(expected, actual);
        assertVehicleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleAutoGeneratedPropertiesEquals(Vehicle expected, Vehicle actual) {
        assertThat(actual)
            .as("Verify Vehicle auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleUpdatableFieldsEquals(Vehicle expected, Vehicle actual) {
        assertThat(actual)
            .as("Verify Vehicle relevant properties")
            .satisfies(a -> assertThat(a.getPlateNumber()).as("check plateNumber").isEqualTo(expected.getPlateNumber()))
            .satisfies(a -> assertThat(a.getModel()).as("check model").isEqualTo(expected.getModel()))
            .satisfies(a -> assertThat(a.getCapacity()).as("check capacity").isEqualTo(expected.getCapacity()))
            .satisfies(a -> assertThat(a.getSeatLayout()).as("check seatLayout").isEqualTo(expected.getSeatLayout()))
            .satisfies(a -> assertThat(a.getAmenities()).as("check amenities").isEqualTo(expected.getAmenities()))
            .satisfies(a -> assertThat(a.getImageCoverUrl()).as("check imageCoverUrl").isEqualTo(expected.getImageCoverUrl()))
            .satisfies(a -> assertThat(a.getAverageRating()).as("check averageRating").isEqualTo(expected.getAverageRating()))
            .satisfies(a -> assertThat(a.getTotalReviews()).as("check totalReviews").isEqualTo(expected.getTotalReviews()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getYearManufactured()).as("check yearManufactured").isEqualTo(expected.getYearManufactured()))
            .satisfies(a ->
                assertThat(a.getLastMaintenanceDate()).as("check lastMaintenanceDate").isEqualTo(expected.getLastMaintenanceDate())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleUpdatableRelationshipsEquals(Vehicle expected, Vehicle actual) {
        assertThat(actual)
            .as("Verify Vehicle relationships")
            .satisfies(a -> assertThat(a.getSummary()).as("check summary").isEqualTo(expected.getSummary()))
            .satisfies(a -> assertThat(a.getHomeStation()).as("check homeStation").isEqualTo(expected.getHomeStation()))
            .satisfies(a -> assertThat(a.getOperator()).as("check operator").isEqualTo(expected.getOperator()));
    }
}
