package com.ticketsystem.route.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TripAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripAllPropertiesEquals(Trip expected, Trip actual) {
        assertTripAutoGeneratedPropertiesEquals(expected, actual);
        assertTripAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripAllUpdatablePropertiesEquals(Trip expected, Trip actual) {
        assertTripUpdatableFieldsEquals(expected, actual);
        assertTripUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripAutoGeneratedPropertiesEquals(Trip expected, Trip actual) {
        assertThat(actual)
            .as("Verify Trip auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripUpdatableFieldsEquals(Trip expected, Trip actual) {
        assertThat(actual)
            .as("Verify Trip relevant properties")
            .satisfies(a -> assertThat(a.getDepartureTime()).as("check departureTime").isEqualTo(expected.getDepartureTime()))
            .satisfies(a -> assertThat(a.getArrivalTime()).as("check arrivalTime").isEqualTo(expected.getArrivalTime()))
            .satisfies(a -> assertThat(a.getAvailableSeats()).as("check availableSeats").isEqualTo(expected.getAvailableSeats()))
            .satisfies(a -> assertThat(a.getTotalSeats()).as("check totalSeats").isEqualTo(expected.getTotalSeats()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getDriverId()).as("check driverId").isEqualTo(expected.getDriverId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripUpdatableRelationshipsEquals(Trip expected, Trip actual) {
        assertThat(actual)
            .as("Verify Trip relationships")
            .satisfies(a -> assertThat(a.getRoute()).as("check route").isEqualTo(expected.getRoute()));
    }
}
