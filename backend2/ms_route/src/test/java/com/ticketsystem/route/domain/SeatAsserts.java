package com.ticketsystem.route.domain;

import static com.ticketsystem.route.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SeatAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatAllPropertiesEquals(Seat expected, Seat actual) {
        assertSeatAutoGeneratedPropertiesEquals(expected, actual);
        assertSeatAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatAllUpdatablePropertiesEquals(Seat expected, Seat actual) {
        assertSeatUpdatableFieldsEquals(expected, actual);
        assertSeatUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatAutoGeneratedPropertiesEquals(Seat expected, Seat actual) {
        assertThat(actual)
            .as("Verify Seat auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatUpdatableFieldsEquals(Seat expected, Seat actual) {
        assertThat(actual)
            .as("Verify Seat relevant properties")
            .satisfies(a -> assertThat(a.getSeatNumber()).as("check seatNumber").isEqualTo(expected.getSeatNumber()))
            .satisfies(a -> assertThat(a.getSeatType()).as("check seatType").isEqualTo(expected.getSeatType()))
            .satisfies(a -> assertThat(a.getDeck()).as("check deck").isEqualTo(expected.getDeck()))
            .satisfies(a ->
                assertThat(a.getPriceModifier())
                    .as("check priceModifier")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPriceModifier())
            )
            .satisfies(a -> assertThat(a.getIsAvailable()).as("check isAvailable").isEqualTo(expected.getIsAvailable()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatUpdatableRelationshipsEquals(Seat expected, Seat actual) {
        assertThat(actual)
            .as("Verify Seat relationships")
            .satisfies(a -> assertThat(a.getTrip()).as("check trip").isEqualTo(expected.getTrip()));
    }
}
