package com.ticketsystem.booking.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BookingHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingHistoryAllPropertiesEquals(BookingHistory expected, BookingHistory actual) {
        assertBookingHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertBookingHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingHistoryAllUpdatablePropertiesEquals(BookingHistory expected, BookingHistory actual) {
        assertBookingHistoryUpdatableFieldsEquals(expected, actual);
        assertBookingHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingHistoryAutoGeneratedPropertiesEquals(BookingHistory expected, BookingHistory actual) {
        assertThat(actual)
            .as("Verify BookingHistory auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingHistoryUpdatableFieldsEquals(BookingHistory expected, BookingHistory actual) {
        assertThat(actual)
            .as("Verify BookingHistory relevant properties")
            .satisfies(a -> assertThat(a.getPreviousStatus()).as("check previousStatus").isEqualTo(expected.getPreviousStatus()))
            .satisfies(a -> assertThat(a.getNewStatus()).as("check newStatus").isEqualTo(expected.getNewStatus()))
            .satisfies(a -> assertThat(a.getReason()).as("check reason").isEqualTo(expected.getReason()))
            .satisfies(a -> assertThat(a.getChangedBy()).as("check changedBy").isEqualTo(expected.getChangedBy()))
            .satisfies(a -> assertThat(a.getChangedAt()).as("check changedAt").isEqualTo(expected.getChangedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingHistoryUpdatableRelationshipsEquals(BookingHistory expected, BookingHistory actual) {
        assertThat(actual)
            .as("Verify BookingHistory relationships")
            .satisfies(a -> assertThat(a.getBooking()).as("check booking").isEqualTo(expected.getBooking()));
    }
}
