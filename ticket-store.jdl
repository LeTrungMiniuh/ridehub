// =======================================
// üöåüöÇ Train & Bus Ticket Selling System
// =======================================
enum TicketStatus {
  AVAILABLE, BOOKED, CANCELLED, EXPIRED
}

enum PaymentStatus {
  PENDING, COMPLETED, FAILED, REFUNDED
}

enum TransportType {
  TRAIN, BUS
}

enum SeatType {
  ECONOMY, BUSINESS, FIRST_CLASS, VIP
}

enum BookingStatus {
  PENDING, CONFIRMED, CANCELLED, COMPLETED
}

// =======================================
// üîê Gateway Application
// =======================================
application {
  config {
    baseName gateway
    packageName com.ticketsystem.gateway
    applicationType gateway
    authenticationType oauth2
    databaseType no
    serverPort 8080
    serviceDiscoveryType consul
    enableSwaggerCodegen true
  }
  entities User, KeycloakUser, Route, Schedule, Ticket, Booking, Payment, Notification
}

// =======================================
// üë§ User Microservice
// =======================================
application {
  config {
    baseName ms_user
    packageName com.ticketsystem.user
    applicationType microservice
    authenticationType oauth2
    databaseType sql
    devDatabaseType mysql
    prodDatabaseType mysql
    serverPort 8081
    serviceDiscoveryType consul
    enableSwaggerCodegen true
    cacheProvider redis
  }
  entities User, KeycloakUser
}

// =======================================
// üõ§Ô∏è Route & Schedule Microservice
// =======================================
application {
  config {
    baseName ms_route
    packageName com.ticketsystem.route
    applicationType microservice
    authenticationType oauth2
    databaseType sql
    devDatabaseType mysql
    prodDatabaseType mysql
    serverPort 8082
    messageBroker kafka
    serviceDiscoveryType consul
    searchEngine elasticsearch
    enableSwaggerCodegen true
    cacheProvider redis
  }
  entities Route, Schedule
}

// =======================================
// üé´ Ticket & Booking Microservice
// =======================================
application {
  config {
    baseName ms_booking
    packageName com.ticketsystem.booking
    applicationType microservice
    authenticationType oauth2
    databaseType sql
    devDatabaseType mysql
    prodDatabaseType mysql
    serverPort 8083
    messageBroker kafka
    serviceDiscoveryType consul
    enableSwaggerCodegen true
    cacheProvider redis
  }
  entities Ticket, Booking
}

// =======================================
// üí≥ Payment Microservice
// =======================================
application {
  config {
    baseName ms_payment
    packageName com.ticketsystem.payment
    applicationType microservice
    authenticationType oauth2
    databaseType sql
    devDatabaseType mysql
    prodDatabaseType mysql
    serverPort 8084
    messageBroker kafka
    serviceDiscoveryType consul
    enableSwaggerCodegen true
  }
  entities Payment
}

// =======================================
// üîî Notification Microservice
// =======================================
application {
  config {
    baseName ms_notification
    packageName com.ticketsystem.notification
    applicationType microservice
    authenticationType oauth2
    databaseType sql
    devDatabaseType mysql
    prodDatabaseType mysql
    serverPort 8085
    messageBroker kafka
    serviceDiscoveryType consul
    enableSwaggerCodegen true
    cacheProvider redis
  }
  entities Notification
}

// =======================================
// üì¶ Entities
// =======================================
entity User {
  id UUID required
  username String required unique
  email String required unique
  passwordHash String required
  firstName String required
  lastName String required
  phoneNumber String required
  dateOfBirth LocalDate
  createdAt Instant required
  updatedAt Instant required
  keycloakUserId UUID required
  userAvatar String
  isActive Boolean required
}

entity KeycloakUser {
  id UUID required
  username String required unique
  email String required unique
  realmId UUID required
  userId UUID required
}

entity Route {
  id UUID required
  routeName String required
  origin String required
  destination String required
  distance Double required
  estimatedDuration Integer required // in minutes
  transportType TransportType required
  isActive Boolean required
  createdAt Instant required
  updatedAt Instant required
}

entity Schedule {
  id UUID required
  routeId UUID required
  departureTime Instant required
  arrivalTime Instant required
  totalSeats Integer required
  availableSeats Integer required
  basePrice BigDecimal required
  isActive Boolean required
  createdAt Instant required
  updatedAt Instant required
}

entity Ticket {
  id UUID required
  scheduleId UUID required
  seatNumber String required
  seatType SeatType required
  price BigDecimal required
  status TicketStatus required
  reservedUntil Instant
  createdAt Instant required
  updatedAt Instant required
}

entity Booking {
  id UUID required
  userId UUID required
  scheduleId UUID required
  ticketIds TextBlob required // JSON array of ticket IDs
  totalAmount BigDecimal required
  status BookingStatus required
  passengerDetails TextBlob required // JSON array of passenger info
  contactEmail String required
  contactPhone String required
  bookingReference String required unique
  createdAt Instant required
  updatedAt Instant required
  expiresAt Instant required
}

entity Payment {
  id UUID required
  bookingId UUID required
  userId UUID required
  amount BigDecimal required
  currency String required
  paymentMethod String required
  status PaymentStatus required
  transactionId String unique
  paymentGatewayResponse TextBlob
  createdAt Instant required
  updatedAt Instant required
}

entity Notification {
  id UUID required
  recipientId UUID required
  type String required
  title String required
  message TextBlob required
  isRead Boolean required
  relatedEntityType String
  relatedEntityId UUID
  createdAt Instant required
  scheduledAt Instant
}

// =======================================
// üîó Relationships (Within Same Microservices Only)
// =======================================
relationship OneToMany {
  Route to Schedule{route}
}

// =======================================
// ‚öôÔ∏è Entity-to-Microservice Mapping
// =======================================
microservice User, KeycloakUser with ms_user
microservice Route, Schedule with ms_route
microservice Ticket, Booking with ms_booking
microservice Payment with ms_payment
microservice Notification with ms_notification

// =======================================
// üîÅ Global Options
// =======================================
dto * with mapstruct
service * with serviceImpl
paginate Route, Schedule, Ticket, Booking, Payment, Notification with infinite-scroll
search Route, Schedule with elasticsearch

// =======================================
// üöÄ Deployment Config
// =======================================
deployment {
  deploymentType docker-compose
  serviceDiscoveryType consul
  appsFolders [gateway, ms_user, ms_route, ms_booking, ms_payment, ms_notification]
  dockerRepositoryName "ticketsystem"
  monitoring prometheus
}

// =======================================
// üìù Kafka Integration Configuration
// =======================================
/*
KAFKA SETUP INSTRUCTIONS:

1. Add to docker-compose.yml:
   zookeeper:
     image: confluentinc/cp-zookeeper:7.0.1
     hostname: zookeeper
     container_name: zookeeper
     ports:
       - "2181:2181"
     environment:
       ZOOKEEPER_CLIENT_PORT: 2181
       ZOOKEEPER_TICK_TIME: 2000

   kafka:
     image: confluentinc/cp-kafka:7.0.1
     hostname: kafka
     container_name: kafka
     depends_on:
       - zookeeper
     ports:
       - "29092:29092"
       - "9092:9092"
       - "9101:9101"
     environment:
       KAFKA_BROKER_ID: 1
       KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
       KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
       KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
       KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
       KAFKA_JMX_PORT: 9101
       KAFKA_JMX_HOSTNAME: localhost

2. Add Kafka dependencies to each microservice pom.xml:
   <dependency>
     <groupId>org.springframework.kafka</groupId>
     <artifactId>spring-kafka</artifactId>
   </dependency>

3. Add Kafka configuration to application.yml for each microservice:
   spring:
     kafka:
       bootstrap-servers: localhost:9092
       consumer:
         bootstrap-servers: localhost:9092
         group-id: ${spring.application.name}
         auto-offset-reset: earliest
         key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
         value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
         properties:
           spring.json.trusted.packages: "*"
       producer:
         bootstrap-servers: localhost:9092
         key-serializer: org.apache.kafka.common.serialization.StringSerializer
         value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

KAFKA TOPICS & EVENT FLOWS:

Topic: user-events
- Events: USER_CREATED, USER_UPDATED, USER_DELETED
- Producers: ms_user
- Consumers: ms_notification

Topic: booking-events  
- Events: BOOKING_CREATED, BOOKING_CONFIRMED, BOOKING_CANCELLED, BOOKING_EXPIRED
- Producers: ms_booking
- Consumers: ms_payment, ms_notification

Topic: payment-events
- Events: PAYMENT_INITIATED, PAYMENT_COMPLETED, PAYMENT_FAILED, PAYMENT_REFUNDED  
- Producers: ms_payment
- Consumers: ms_booking, ms_notification

Topic: ticket-events
- Events: TICKET_RESERVED, TICKET_BOOKED, TICKET_CANCELLED, TICKET_RELEASED
- Producers: ms_booking
- Consumers: ms_route (for seat availability updates)

Topic: schedule-events
- Events: SCHEDULE_CREATED, SCHEDULE_UPDATED, SEATS_UPDATED
- Producers: ms_route  
- Consumers: ms_booking

EVENT FLOW EXAMPLES:

1. Booking Flow:
   User creates booking ‚Üí ms_booking publishes BOOKING_CREATED to booking-events
   ‚Üí ms_payment receives event and initiates payment
   ‚Üí Payment completed ‚Üí ms_payment publishes PAYMENT_COMPLETED to payment-events  
   ‚Üí ms_booking receives event and confirms booking
   ‚Üí ms_booking publishes BOOKING_CONFIRMED to booking-events
   ‚Üí ms_notification receives event and sends confirmation email

2. Seat Management:
   Ticket booked ‚Üí ms_booking publishes TICKET_BOOKED to ticket-events
   ‚Üí ms_route receives event and updates available seats
   ‚Üí ms_route publishes SEATS_UPDATED to schedule-events

3. Cancellation Flow:
   User cancels booking ‚Üí ms_booking publishes BOOKING_CANCELLED to booking-events
   ‚Üí ms_payment receives event and processes refund  
   ‚Üí ms_booking publishes TICKET_RELEASED to ticket-events
   ‚Üí ms_route updates seat availability
   ‚Üí ms_notification sends cancellation confirmation

IMPLEMENTATION EXAMPLE:

@Component
public class BookingEventProducer {
    
    @Autowired
    private KafkaTemplate<String, Object> kafkaTemplate;
    
    public void publishBookingCreated(BookingCreatedEvent event) {
        kafkaTemplate.send("booking-events", event);
    }
}

@KafkaListener(topics = "booking-events", groupId = "payment-service")
public void handleBookingEvent(BookingCreatedEvent event) {
    // Process booking event in payment service
}
*/