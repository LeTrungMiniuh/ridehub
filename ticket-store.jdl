// =======================
// Enums
// =======================
enum TransportType { BUS, TRAIN, FERRY }
enum SeatType { BERTH_LOWER, BERTH_UPPER, SEAT_STANDARD, SEAT_VIP, WHEELCHAIR_ACCESSIBLE }
enum BookingStatus { DRAFT, PENDING_PAYMENT, CONFIRMED, CHECKED_IN, COMPLETED, CANCELLED, REFUNDED }
enum PaymentStatus { PENDING, PROCESSING, COMPLETED, FAILED, CANCELLED, REFUNDED }

// =======================
// Applications
// =======================
application {
  config {
    baseName gateway
    packageName com.ticketsystem.gateway
    applicationType gateway
    authenticationType oauth2
    databaseType no
    serviceDiscoveryType consul
    serverPort 8080
    enableSwaggerCodegen true
  }
}

application {
  config {
    baseName ms_user
    packageName com.ticketsystem.user
    applicationType microservice
    authenticationType oauth2
    databaseType sql
    devDatabaseType mysql
    prodDatabaseType mysql
    serviceDiscoveryType consul
    serverPort 8081
    cacheProvider redis
    enableSwaggerCodegen true
  }
  entities AppUser, UserPreferences
}

application {
  config {
    baseName ms_route
    packageName com.ticketsystem.route
    applicationType microservice
    authenticationType oauth2
    databaseType sql
    devDatabaseType mysql
    prodDatabaseType mysql
    messageBroker kafka
    searchEngine elasticsearch
    cacheProvider redis
    serviceDiscoveryType consul
    serverPort 8082
    enableSwaggerCodegen true
  }
  entities Province, District, Ward, Address, Operator, Station, Route, Trip, Vehicle, VehicleImage, VehicleReview, Seat, VehicleAmenity, ReviewSummary
}

application {
  config {
    baseName ms_booking
    packageName com.ticketsystem.booking
    applicationType microservice
    authenticationType oauth2
    databaseType sql
    devDatabaseType mysql
    prodDatabaseType mysql
    messageBroker kafka
    cacheProvider redis
    serviceDiscoveryType consul
    serverPort 8083
    enableSwaggerCodegen true
  }
  entities Booking, Passenger, BookingHistory
}

application {
  config {
    baseName ms_payment
    packageName com.ticketsystem.payment
    applicationType microservice
    authenticationType oauth2
    databaseType sql
    devDatabaseType mysql
    prodDatabaseType mysql
    messageBroker kafka
    serviceDiscoveryType consul
    serverPort 8084
    enableSwaggerCodegen true
  }
  entities Payment, PaymentMethod, Refund
}

application {
  config {
    baseName ms_notification
    packageName com.ticketsystem.notification
    applicationType microservice
    authenticationType oauth2
    databaseType sql
    devDatabaseType mysql
    prodDatabaseType mysql
    messageBroker kafka
    cacheProvider redis
    serviceDiscoveryType consul
    serverPort 8085
    enableSwaggerCodegen true
  }
  entities NotificationTemplate, Notification
}

// =======================
// Location (inside ms_route)
// =======================
entity Province {
  code String required
  name String required
  nameEn String
  region String
}

entity District {
  code String required
  name String required
  nameEn String
  type String
}

entity Ward {
  code String required
  name String required
  nameEn String
  type String
}

entity Address {
  wardCode String required
  streetAddress String required
  postalCode String
  latitude BigDecimal
  longitude BigDecimal
  landmark String
}

relationship OneToMany {
  Province{districts} to District{province required},
  District{wards} to Ward{district required},
  Ward{addresses} to Address{ward required}
}

// =======================
// User Service (ms_user)
// =======================
entity AppUser {
  username String required minlength(3) maxlength(60) unique
  email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/) unique
  phoneNumber String
  firstName String
  lastName String
  dateOfBirth LocalDate
  idNumber String unique
  nationality String
  profileImage String
  isVerified Boolean
  isActive Boolean required
  createdAt Instant required
  lastLoginAt Instant
}

entity UserPreferences {
  preferredLanguage String
  emailNotifications Boolean
  smsNotifications Boolean
  pushNotifications Boolean
  phone String
  email String
}

relationship OneToOne {
  AppUser{preferences} to UserPreferences{appUser required}
}

// =======================
// Route Service (ms_route)
// =======================
entity Operator {
  name String required
  businessLicense String
  logoUrl String
  rating Double
  contactPhone String
  contactEmail String
  isActive Boolean required
}

entity Station {
  code String required unique
  name String required
  nameEn String
  /** Cross-service ID: Address lives in ms_route; keep as UUID to avoid hard relation across apps */
  addressId UUID required
  facilities String
  operatingHours String
  isActive Boolean required
}

entity Vehicle {
  plateNumber String required unique
  model String
  capacity Integer required
  seatLayout String
  amenities String
  imageCoverUrl String
  averageRating Double
  totalReviews Integer
  isActive Boolean required
  yearManufactured Integer
  lastMaintenanceDate LocalDate
}

entity Route {
  transportType TransportType required
  distance BigDecimal
  estimatedDuration Integer
  basePrice BigDecimal required
  isActive Boolean required
}

entity Trip {
  departureTime Instant required
  arrivalTime Instant required
  availableSeats Integer required
  totalSeats Integer required
  status String
  driverId UUID
}

entity Seat {
  seatNumber String required
  seatType SeatType required
  deck String
  priceModifier BigDecimal
  isAvailable Boolean required
}

entity VehicleImage {
  imageUrl String required
  imageType String required
  description String
  isPrimary Boolean
  uploadedAt Instant required
}

entity VehicleReview {
  userId UUID required
  tripId UUID
  rating Integer required min(1) max(5)
  comment String
  cleanliness Integer min(1) max(5)
  comfort Integer min(1) max(5)
  punctuality Integer min(1) max(5)
  staffService Integer min(1) max(5)
  createdAt Instant required
  isVerified Boolean
}

entity VehicleAmenity {
  amenity String required
  description String
}

entity ReviewSummary {
  averageRating Double
  totalReviews Integer
  updatedAt Instant required
}

relationship OneToMany {
  Operator{vehicles} to Vehicle{operator required},
  Operator{routes} to Route{operator required},
  Vehicle{images} to VehicleImage{vehicle required},
  Vehicle{reviews} to VehicleReview{vehicle required},
  Vehicle{amenityItems} to VehicleAmenity{vehicle required},
  Route{trips} to Trip{route required},
  Trip{seats} to Seat{trip required}
}

relationship ManyToOne {
  Vehicle{homeStation} to Station,
  Route{origin} to Station,
  Route{destination} to Station
}

relationship OneToOne {
  Vehicle{summary} to ReviewSummary{vehicle required}
}

// =======================
// Booking Service (ms_booking)
// =======================
entity Booking {
  userId UUID required
  tripId UUID required
  bookingReference String required unique
  status BookingStatus required
  totalAmount BigDecimal required
  contactPhone String
  contactEmail String
  specialRequests String
  createdAt Instant required
  expiresAt Instant
}

entity Passenger {
  seatId UUID required
  firstName String required
  lastName String required
  idNumber String
  dateOfBirth LocalDate
  nationality String
  ticketNumber String
}

entity BookingHistory {
  previousStatus BookingStatus required
  newStatus BookingStatus required
  reason String
  changedBy UUID
  changedAt Instant required
}

relationship OneToMany {
  Booking{passengers} to Passenger{booking required},
  Booking{histories} to BookingHistory{booking required}
}

// =======================
// Payment Service (ms_payment)
// =======================
entity Payment {
  bookingId UUID required
  userId UUID required
  amount BigDecimal required
  currency String required
  paymentMethod String required
  status PaymentStatus required
  gatewayTransactionId String
  gatewayResponse TextBlob
  paidAt Instant
  refundableUntil Instant
  createdAt Instant required
}

entity PaymentMethod {
  userId UUID required
  type String required
  provider String
  maskedDetails String
  isDefault Boolean
  expiresAt LocalDate
}

entity Refund {
  amount BigDecimal required
  reason String
  status String
  processedAt Instant
  gatewayRefundId String
}

relationship OneToMany {
  Payment{refunds} to Refund{payment required}
}

// =======================
// Notification Service (ms_notification)
// =======================
entity NotificationTemplate {
  type String required
  language String required
  subject String required
  emailBody TextBlob
  smsTemplate String
  pushTemplate String
}

entity Notification {
  recipientId UUID required
  templateType String
  templateLanguage String
  channel String required
  content TextBlob
  metadata String
  sentAt Instant
  deliveredAt Instant
  readAt Instant
  status String
  bookingId UUID
}

relationship ManyToOne {
  Notification{template} to NotificationTemplate
}

// =======================
// Microservice mapping
// =======================
microservice AppUser, UserPreferences with ms_user
microservice Province, District, Ward, Address, Operator, Station, Route, Trip, Vehicle, VehicleImage, VehicleReview, Seat, VehicleAmenity, ReviewSummary with ms_route
microservice Booking, Passenger, BookingHistory with ms_booking
microservice Payment, PaymentMethod, Refund with ms_payment
microservice NotificationTemplate, Notification with ms_notification

// =======================
// Global options
// =======================
dto * with mapstruct
service * with serviceImpl
filter *
paginate Route, Trip, Vehicle, Station, Booking, Payment, Notification with infinite-scroll
search Route, Station with elasticsearch

// =======================
// Deployment
// =======================
deployment {
  deploymentType docker-compose
  serviceDiscoveryType consul
  monitoring prometheus
  appsFolders [gateway, ms_user, ms_route, ms_booking, ms_payment, ms_notification]
  dockerRepositoryName "ticketsystem"
}
