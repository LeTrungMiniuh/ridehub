@startuml
title ms-booking – Payment & Confirmation Workflow (VNPay/MoMo, Dev/Sandbox)

actor Customer
participant "PaymentController" as PAY_API
participant "ReturnController\n(optional)" as RETURN
participant "Payment Gateway" as GATEWAY
participant "PaymentWebhookController" as WEBHOOK
participant "ms-route\n(SeatLockService)" as ROUTE
collections "Redis" as REDIS
database "BookingDB" as BOOKDB
collections "Scheduler" as CRON

== Initialize Payment ==
Customer -> PAY_API : POST /api/bookings/{id}/pay (method, returnUrl)
PAY_API -> GATEWAY : initPayment(amount, orderRef=bookingCode, returnUrl, ipnUrl)
GATEWAY --> PAY_API : paymentUrl
PAY_API --> Customer : {paymentUrl}

== Customer Return (not authoritative) ==
Customer -> RETURN : GET /payments/return?...&signature=...
RETURN -> RETURN : verify HMAC & basic fields
RETURN -> BOOKDB : upsert PaymentWebhookLog(returnQueryHash)  // optional
RETURN --> Customer : show PENDING/CONFIRMED (polls booking status)

== IPN/Webhook – authoritative ==
GATEWAY -> WEBHOOK : POST /payments/webhook (payload + signature)
WEBHOOK -> WEBHOOK : verify HMAC & map gateway status → SUCCESS/FAILED/REFUNDED
WEBHOOK -> BOOKDB : INSERT PaymentWebhookLog(payloadHash) (unique)
alt SUCCESS (first time)
  WEBHOOK -> BOOKDB : tx: INSERT PaymentTransaction{SUCCESS}\nupdate Booking=CONFIRMED\nINSERT Ticket(s)
  WEBHOOK -> ROUTE : POST /locks/confirm {bookingId, tripId, seats[]}
  WEBHOOK -> REDIS : SET booking:{code}=compact view EX 1d
  WEBHOOK --> Customer : {status=CONFIRMED, tickets}
else FAILED/REFUNDED (first time)
  WEBHOOK -> BOOKDB : INSERT PaymentTransaction{FAILED/REFUNDED}\nupdate Booking=CANCELED/REFUNDED
  WEBHOOK -> ROUTE : POST /locks/cancel {bookingId, tripId, seats[]}
  WEBHOOK -> REDIS : DEL booking:sess:{bookingId}
  WEBHOOK --> Customer : {status=CANCELED/REFUNDED}
else duplicate/out-of-order
  WEBHOOK -> BOOKDB : no-op (idempotent by payloadHash/orderRef)
end

== Reconciliation (optional) ==
CRON -> GATEWAY : orderQuery(orderRef)
GATEWAY --> CRON : status + amount
CRON -> WEBHOOK : synthesize webhook if missing (idempotent)
@enduml