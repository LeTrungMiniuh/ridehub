@startuml
title ms-booking â€“ Booking Creation & Seat Reservation (No Kafka)

actor Customer
participant "BookingController" as BOOK_API
participant "PricingService" as PRICING
participant "ms-promotion\n(PromoService)" as PROMO
participant "ms-route\n(SeatLockService)" as ROUTE
collections "Redis" as REDIS
database "BookingDB" as BOOKDB

== Create Booking (DRAFT) ==
Customer -> BOOK_API : POST /api/bookings (tripId, seats[], promoCode?, idemKey)
BOOK_API -> REDIS : SETNX idem:booking:{idemKey} EX 60
BOOK_API -> PRICING : computePrice(tripId, seats, promoCode)

PRICING -> REDIS : GET promo:{promoCode}
PRICING <- REDIS : (hit/miss)
PRICING -> PROMO : validatePromo() [on miss]
PROMO --> PRICING : PromoResult(valid, percentOff, maxOff)
PRICING -> REDIS : SET promo:{promoCode} EX 300
PRICING --> BOOK_API : PricingResult(total, breakdown)

BOOK_API -> BOOKDB : INSERT Booking{DRAFT}\nINSERT PricingSnapshot, AppliedPromotion
BOOK_API -> REDIS : SET booking:sess:{bookingId}=AWAITING_LOCK EX 1200
BOOK_API -> ROUTE : POST /locks/try {bookingId, tripId, seats[], idemKey}
ROUTE --> BOOK_API : {status=HELD | REJECTED}

alt HELD
    BOOK_API -> BOOKDB : update Booking.status=AWAITING_PAYMENT
    BOOK_API -> REDIS : SET booking:sess:{bookingId}=AWAITING_PAYMENT EX 1200
    BOOK_API --> Customer : 201 {bookingCode, amount, AWAITING_PAYMENT}
else REJECTED
    BOOK_API -> BOOKDB : update Booking.status=CANCELED
    BOOK_API -> REDIS : DEL booking:sess:{bookingId}
    BOOK_API --> Customer : 409 Seat not available
end
@enduml
