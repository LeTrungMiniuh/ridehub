package com.ridehub.booking.domain;

import static com.ridehub.booking.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class AppliedPromotionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppliedPromotionAllPropertiesEquals(AppliedPromotion expected, AppliedPromotion actual) {
        assertAppliedPromotionAutoGeneratedPropertiesEquals(expected, actual);
        assertAppliedPromotionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppliedPromotionAllUpdatablePropertiesEquals(AppliedPromotion expected, AppliedPromotion actual) {
        assertAppliedPromotionUpdatableFieldsEquals(expected, actual);
        assertAppliedPromotionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppliedPromotionAutoGeneratedPropertiesEquals(AppliedPromotion expected, AppliedPromotion actual) {
        assertThat(actual)
            .as("Verify AppliedPromotion auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppliedPromotionUpdatableFieldsEquals(AppliedPromotion expected, AppliedPromotion actual) {
        assertThat(actual)
            .as("Verify AppliedPromotion relevant properties")
            .satisfies(a -> assertThat(a.getPromotionId()).as("check promotionId").isEqualTo(expected.getPromotionId()))
            .satisfies(a -> assertThat(a.getPromotionCode()).as("check promotionCode").isEqualTo(expected.getPromotionCode()))
            .satisfies(a ->
                assertThat(a.getDiscountAmount())
                    .as("check discountAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscountAmount())
            )
            .satisfies(a -> assertThat(a.getAppliedAt()).as("check appliedAt").isEqualTo(expected.getAppliedAt()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppliedPromotionUpdatableRelationshipsEquals(AppliedPromotion expected, AppliedPromotion actual) {
        assertThat(actual)
            .as("Verify AppliedPromotion relationships")
            .satisfies(a -> assertThat(a.getBooking()).as("check booking").isEqualTo(expected.getBooking()));
    }
}
