package com.ridehub.booking.domain;

import static com.ridehub.booking.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PaymentTransactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionAllPropertiesEquals(PaymentTransaction expected, PaymentTransaction actual) {
        assertPaymentTransactionAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentTransactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionAllUpdatablePropertiesEquals(PaymentTransaction expected, PaymentTransaction actual) {
        assertPaymentTransactionUpdatableFieldsEquals(expected, actual);
        assertPaymentTransactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionAutoGeneratedPropertiesEquals(PaymentTransaction expected, PaymentTransaction actual) {
        assertThat(actual)
            .as("Verify PaymentTransaction auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionUpdatableFieldsEquals(PaymentTransaction expected, PaymentTransaction actual) {
        assertThat(actual)
            .as("Verify PaymentTransaction relevant properties")
            .satisfies(a -> assertThat(a.getTransactionId()).as("check transactionId").isEqualTo(expected.getTransactionId()))
            .satisfies(a -> assertThat(a.getMethod()).as("check method").isEqualTo(expected.getMethod()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a ->
                assertThat(a.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAmount())
            )
            .satisfies(a -> assertThat(a.getTime()).as("check time").isEqualTo(expected.getTime()))
            .satisfies(a -> assertThat(a.getGatewayNote()).as("check gatewayNote").isEqualTo(expected.getGatewayNote()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentTransactionUpdatableRelationshipsEquals(PaymentTransaction expected, PaymentTransaction actual) {
        // empty method
    }
}
