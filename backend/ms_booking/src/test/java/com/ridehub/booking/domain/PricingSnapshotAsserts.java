package com.ridehub.booking.domain;

import static com.ridehub.booking.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PricingSnapshotAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPricingSnapshotAllPropertiesEquals(PricingSnapshot expected, PricingSnapshot actual) {
        assertPricingSnapshotAutoGeneratedPropertiesEquals(expected, actual);
        assertPricingSnapshotAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPricingSnapshotAllUpdatablePropertiesEquals(PricingSnapshot expected, PricingSnapshot actual) {
        assertPricingSnapshotUpdatableFieldsEquals(expected, actual);
        assertPricingSnapshotUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPricingSnapshotAutoGeneratedPropertiesEquals(PricingSnapshot expected, PricingSnapshot actual) {
        assertThat(actual)
            .as("Verify PricingSnapshot auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPricingSnapshotUpdatableFieldsEquals(PricingSnapshot expected, PricingSnapshot actual) {
        assertThat(actual)
            .as("Verify PricingSnapshot relevant properties")
            .satisfies(a ->
                assertThat(a.getBaseFare()).as("check baseFare").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getBaseFare())
            )
            .satisfies(a ->
                assertThat(a.getVehicleFactor())
                    .as("check vehicleFactor")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getVehicleFactor())
            )
            .satisfies(a ->
                assertThat(a.getFloorFactor())
                    .as("check floorFactor")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getFloorFactor())
            )
            .satisfies(a ->
                assertThat(a.getSeatFactor())
                    .as("check seatFactor")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getSeatFactor())
            )
            .satisfies(a ->
                assertThat(a.getFinalPrice())
                    .as("check finalPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getFinalPrice())
            )
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPricingSnapshotUpdatableRelationshipsEquals(PricingSnapshot expected, PricingSnapshot actual) {
        assertThat(actual)
            .as("Verify PricingSnapshot relationships")
            .satisfies(a -> assertThat(a.getBooking()).as("check booking").isEqualTo(expected.getBooking()));
    }
}
