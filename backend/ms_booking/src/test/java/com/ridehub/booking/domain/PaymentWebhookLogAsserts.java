package com.ridehub.booking.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PaymentWebhookLogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentWebhookLogAllPropertiesEquals(PaymentWebhookLog expected, PaymentWebhookLog actual) {
        assertPaymentWebhookLogAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentWebhookLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentWebhookLogAllUpdatablePropertiesEquals(PaymentWebhookLog expected, PaymentWebhookLog actual) {
        assertPaymentWebhookLogUpdatableFieldsEquals(expected, actual);
        assertPaymentWebhookLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentWebhookLogAutoGeneratedPropertiesEquals(PaymentWebhookLog expected, PaymentWebhookLog actual) {
        assertThat(actual)
            .as("Verify PaymentWebhookLog auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentWebhookLogUpdatableFieldsEquals(PaymentWebhookLog expected, PaymentWebhookLog actual) {
        assertThat(actual)
            .as("Verify PaymentWebhookLog relevant properties")
            .satisfies(a -> assertThat(a.getProvider()).as("check provider").isEqualTo(expected.getProvider()))
            .satisfies(a -> assertThat(a.getPayloadHash()).as("check payloadHash").isEqualTo(expected.getPayloadHash()))
            .satisfies(a -> assertThat(a.getReceivedAt()).as("check receivedAt").isEqualTo(expected.getReceivedAt()))
            .satisfies(a -> assertThat(a.getProcessingStatus()).as("check processingStatus").isEqualTo(expected.getProcessingStatus()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentWebhookLogUpdatableRelationshipsEquals(PaymentWebhookLog expected, PaymentWebhookLog actual) {
        assertThat(actual)
            .as("Verify PaymentWebhookLog relationships")
            .satisfies(a -> assertThat(a.getPaymentTransaction()).as("check paymentTransaction").isEqualTo(expected.getPaymentTransaction())
            );
    }
}
