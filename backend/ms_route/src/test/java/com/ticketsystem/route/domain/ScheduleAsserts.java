package com.ticketsystem.route.domain;

import static com.ticketsystem.route.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ScheduleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleAllPropertiesEquals(Schedule expected, Schedule actual) {
        assertScheduleAutoGeneratedPropertiesEquals(expected, actual);
        assertScheduleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleAllUpdatablePropertiesEquals(Schedule expected, Schedule actual) {
        assertScheduleUpdatableFieldsEquals(expected, actual);
        assertScheduleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleAutoGeneratedPropertiesEquals(Schedule expected, Schedule actual) {
        assertThat(actual)
            .as("Verify Schedule auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleUpdatableFieldsEquals(Schedule expected, Schedule actual) {
        assertThat(actual)
            .as("Verify Schedule relevant properties")
            .satisfies(a -> assertThat(a.getDepartureTime()).as("check departureTime").isEqualTo(expected.getDepartureTime()))
            .satisfies(a -> assertThat(a.getArrivalTime()).as("check arrivalTime").isEqualTo(expected.getArrivalTime()))
            .satisfies(a -> assertThat(a.getTotalSeats()).as("check totalSeats").isEqualTo(expected.getTotalSeats()))
            .satisfies(a -> assertThat(a.getAvailableSeats()).as("check availableSeats").isEqualTo(expected.getAvailableSeats()))
            .satisfies(a ->
                assertThat(a.getBasePrice()).as("check basePrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getBasePrice())
            )
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleUpdatableRelationshipsEquals(Schedule expected, Schedule actual) {
        assertThat(actual)
            .as("Verify Schedule relationships")
            .satisfies(a -> assertThat(a.getRoute()).as("check route").isEqualTo(expected.getRoute()));
    }
}
