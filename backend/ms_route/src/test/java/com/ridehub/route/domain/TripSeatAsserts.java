package com.ridehub.route.domain;

import static com.ridehub.route.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TripSeatAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripSeatAllPropertiesEquals(TripSeat expected, TripSeat actual) {
        assertTripSeatAutoGeneratedPropertiesEquals(expected, actual);
        assertTripSeatAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripSeatAllUpdatablePropertiesEquals(TripSeat expected, TripSeat actual) {
        assertTripSeatUpdatableFieldsEquals(expected, actual);
        assertTripSeatUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripSeatAutoGeneratedPropertiesEquals(TripSeat expected, TripSeat actual) {
        assertThat(actual)
            .as("Verify TripSeat auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripSeatUpdatableFieldsEquals(TripSeat expected, TripSeat actual) {
        assertThat(actual)
            .as("Verify TripSeat relevant properties")
            .satisfies(a -> assertThat(a.getSeatNo()).as("check seatNo").isEqualTo(expected.getSeatNo()))
            .satisfies(a -> assertThat(a.getFloorNo()).as("check floorNo").isEqualTo(expected.getFloorNo()))
            .satisfies(a -> assertThat(a.getBooked()).as("check booked").isEqualTo(expected.getBooked()))
            .satisfies(a ->
                assertThat(a.getPriceFactor())
                    .as("check priceFactor")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPriceFactor())
            )
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripSeatUpdatableRelationshipsEquals(TripSeat expected, TripSeat actual) {
        assertThat(actual)
            .as("Verify TripSeat relationships")
            .satisfies(a -> assertThat(a.getTrip()).as("check trip").isEqualTo(expected.getTrip()));
    }
}
