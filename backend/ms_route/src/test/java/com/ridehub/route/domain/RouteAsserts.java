package com.ridehub.route.domain;

import static com.ridehub.route.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class RouteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteAllPropertiesEquals(Route expected, Route actual) {
        assertRouteAutoGeneratedPropertiesEquals(expected, actual);
        assertRouteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteAllUpdatablePropertiesEquals(Route expected, Route actual) {
        assertRouteUpdatableFieldsEquals(expected, actual);
        assertRouteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteAutoGeneratedPropertiesEquals(Route expected, Route actual) {
        assertThat(actual)
            .as("Verify Route auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteUpdatableFieldsEquals(Route expected, Route actual) {
        assertThat(actual)
            .as("Verify Route relevant properties")
            .satisfies(a -> assertThat(a.getRouteCode()).as("check routeCode").isEqualTo(expected.getRouteCode()))
            .satisfies(a ->
                assertThat(a.getDistanceKm())
                    .as("check distanceKm")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDistanceKm())
            )
            .satisfies(a ->
                assertThat(a.getBaseFare()).as("check baseFare").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getBaseFare())
            )
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteUpdatableRelationshipsEquals(Route expected, Route actual) {
        assertThat(actual)
            .as("Verify Route relationships")
            .satisfies(a -> assertThat(a.getOrigin()).as("check origin").isEqualTo(expected.getOrigin()))
            .satisfies(a -> assertThat(a.getDestination()).as("check destination").isEqualTo(expected.getDestination()));
    }
}
