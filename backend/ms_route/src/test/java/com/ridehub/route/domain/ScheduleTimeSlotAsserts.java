package com.ridehub.route.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ScheduleTimeSlotAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleTimeSlotAllPropertiesEquals(ScheduleTimeSlot expected, ScheduleTimeSlot actual) {
        assertScheduleTimeSlotAutoGeneratedPropertiesEquals(expected, actual);
        assertScheduleTimeSlotAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleTimeSlotAllUpdatablePropertiesEquals(ScheduleTimeSlot expected, ScheduleTimeSlot actual) {
        assertScheduleTimeSlotUpdatableFieldsEquals(expected, actual);
        assertScheduleTimeSlotUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleTimeSlotAutoGeneratedPropertiesEquals(ScheduleTimeSlot expected, ScheduleTimeSlot actual) {
        assertThat(actual)
            .as("Verify ScheduleTimeSlot auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleTimeSlotUpdatableFieldsEquals(ScheduleTimeSlot expected, ScheduleTimeSlot actual) {
        assertThat(actual)
            .as("Verify ScheduleTimeSlot relevant properties")
            .satisfies(a -> assertThat(a.getSlotCode()).as("check slotCode").isEqualTo(expected.getSlotCode()))
            .satisfies(a -> assertThat(a.getDepartureTime()).as("check departureTime").isEqualTo(expected.getDepartureTime()))
            .satisfies(a -> assertThat(a.getArrivalTime()).as("check arrivalTime").isEqualTo(expected.getArrivalTime()))
            .satisfies(a -> assertThat(a.getBufferMinutes()).as("check bufferMinutes").isEqualTo(expected.getBufferMinutes()))
            .satisfies(a -> assertThat(a.getSequence()).as("check sequence").isEqualTo(expected.getSequence()))
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleTimeSlotUpdatableRelationshipsEquals(ScheduleTimeSlot expected, ScheduleTimeSlot actual) {
        assertThat(actual)
            .as("Verify ScheduleTimeSlot relationships")
            .satisfies(a -> assertThat(a.getSchedule()).as("check schedule").isEqualTo(expected.getSchedule()));
    }
}
