package com.ridehub.route.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DriverAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDriverAllPropertiesEquals(Driver expected, Driver actual) {
        assertDriverAutoGeneratedPropertiesEquals(expected, actual);
        assertDriverAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDriverAllUpdatablePropertiesEquals(Driver expected, Driver actual) {
        assertDriverUpdatableFieldsEquals(expected, actual);
        assertDriverUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDriverAutoGeneratedPropertiesEquals(Driver expected, Driver actual) {
        assertThat(actual)
            .as("Verify Driver auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDriverUpdatableFieldsEquals(Driver expected, Driver actual) {
        assertThat(actual)
            .as("Verify Driver relevant properties")
            .satisfies(a -> assertThat(a.getLicenseClass()).as("check licenseClass").isEqualTo(expected.getLicenseClass()))
            .satisfies(a -> assertThat(a.getYearsExperience()).as("check yearsExperience").isEqualTo(expected.getYearsExperience()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDriverUpdatableRelationshipsEquals(Driver expected, Driver actual) {
        // empty method
    }
}
