package com.ridehub.route.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AttendantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttendantAllPropertiesEquals(Attendant expected, Attendant actual) {
        assertAttendantAutoGeneratedPropertiesEquals(expected, actual);
        assertAttendantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttendantAllUpdatablePropertiesEquals(Attendant expected, Attendant actual) {
        assertAttendantUpdatableFieldsEquals(expected, actual);
        assertAttendantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttendantAutoGeneratedPropertiesEquals(Attendant expected, Attendant actual) {
        assertThat(actual)
            .as("Verify Attendant auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttendantUpdatableFieldsEquals(Attendant expected, Attendant actual) {
        assertThat(actual)
            .as("Verify Attendant relevant properties")
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttendantUpdatableRelationshipsEquals(Attendant expected, Attendant actual) {
        assertThat(actual)
            .as("Verify Attendant relationships")
            .satisfies(a -> assertThat(a.getStaff()).as("check staff").isEqualTo(expected.getStaff()));
    }
}
