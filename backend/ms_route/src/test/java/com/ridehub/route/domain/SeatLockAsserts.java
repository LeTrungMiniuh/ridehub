package com.ridehub.route.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SeatLockAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatLockAllPropertiesEquals(SeatLock expected, SeatLock actual) {
        assertSeatLockAutoGeneratedPropertiesEquals(expected, actual);
        assertSeatLockAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatLockAllUpdatablePropertiesEquals(SeatLock expected, SeatLock actual) {
        assertSeatLockUpdatableFieldsEquals(expected, actual);
        assertSeatLockUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatLockAutoGeneratedPropertiesEquals(SeatLock expected, SeatLock actual) {
        assertThat(actual)
            .as("Verify SeatLock auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatLockUpdatableFieldsEquals(SeatLock expected, SeatLock actual) {
        assertThat(actual)
            .as("Verify SeatLock relevant properties")
            .satisfies(a -> assertThat(a.getSeatNo()).as("check seatNo").isEqualTo(expected.getSeatNo()))
            .satisfies(a -> assertThat(a.getUserId()).as("check userId").isEqualTo(expected.getUserId()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getExpiresAt()).as("check expiresAt").isEqualTo(expected.getExpiresAt()))
            .satisfies(a -> assertThat(a.getIdempotencyKey()).as("check idempotencyKey").isEqualTo(expected.getIdempotencyKey()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatLockUpdatableRelationshipsEquals(SeatLock expected, SeatLock actual) {
        assertThat(actual)
            .as("Verify SeatLock relationships")
            .satisfies(a -> assertThat(a.getTrip()).as("check trip").isEqualTo(expected.getTrip()));
    }
}
