package com.ridehub.route.domain;

import static com.ridehub.route.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TripAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripAllPropertiesEquals(Trip expected, Trip actual) {
        assertTripAutoGeneratedPropertiesEquals(expected, actual);
        assertTripAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripAllUpdatablePropertiesEquals(Trip expected, Trip actual) {
        assertTripUpdatableFieldsEquals(expected, actual);
        assertTripUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripAutoGeneratedPropertiesEquals(Trip expected, Trip actual) {
        assertThat(actual)
            .as("Verify Trip auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripUpdatableFieldsEquals(Trip expected, Trip actual) {
        assertThat(actual)
            .as("Verify Trip relevant properties")
            .satisfies(a -> assertThat(a.getTripCode()).as("check tripCode").isEqualTo(expected.getTripCode()))
            .satisfies(a -> assertThat(a.getDepartureTime()).as("check departureTime").isEqualTo(expected.getDepartureTime()))
            .satisfies(a -> assertThat(a.getArrivalTime()).as("check arrivalTime").isEqualTo(expected.getArrivalTime()))
            .satisfies(a ->
                assertThat(a.getBaseFare()).as("check baseFare").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getBaseFare())
            )
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTripUpdatableRelationshipsEquals(Trip expected, Trip actual) {
        assertThat(actual)
            .as("Verify Trip relationships")
            .satisfies(a -> assertThat(a.getDriver()).as("check driver").isEqualTo(expected.getDriver()))
            .satisfies(a -> assertThat(a.getAttendant()).as("check attendant").isEqualTo(expected.getAttendant()))
            .satisfies(a -> assertThat(a.getRoute()).as("check route").isEqualTo(expected.getRoute()));
    }
}
