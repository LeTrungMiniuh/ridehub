package com.ridehub.route.domain;

import static com.ridehub.route.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SeatAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatAllPropertiesEquals(Seat expected, Seat actual) {
        assertSeatAutoGeneratedPropertiesEquals(expected, actual);
        assertSeatAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatAllUpdatablePropertiesEquals(Seat expected, Seat actual) {
        assertSeatUpdatableFieldsEquals(expected, actual);
        assertSeatUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatAutoGeneratedPropertiesEquals(Seat expected, Seat actual) {
        assertThat(actual)
            .as("Verify Seat auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatUpdatableFieldsEquals(Seat expected, Seat actual) {
        assertThat(actual)
            .as("Verify Seat relevant properties")
            .satisfies(a -> assertThat(a.getSeatNo()).as("check seatNo").isEqualTo(expected.getSeatNo()))
            .satisfies(a -> assertThat(a.getRowNo()).as("check rowNo").isEqualTo(expected.getRowNo()))
            .satisfies(a -> assertThat(a.getColNo()).as("check colNo").isEqualTo(expected.getColNo()))
            .satisfies(a ->
                assertThat(a.getPriceFactor())
                    .as("check priceFactor")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPriceFactor())
            )
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatUpdatableRelationshipsEquals(Seat expected, Seat actual) {
        assertThat(actual)
            .as("Verify Seat relationships")
            .satisfies(a -> assertThat(a.getFloor()).as("check floor").isEqualTo(expected.getFloor()));
    }
}
