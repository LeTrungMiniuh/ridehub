package com.ridehub.route.domain;

import static com.ridehub.route.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ScheduleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleAllPropertiesEquals(Schedule expected, Schedule actual) {
        assertScheduleAutoGeneratedPropertiesEquals(expected, actual);
        assertScheduleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleAllUpdatablePropertiesEquals(Schedule expected, Schedule actual) {
        assertScheduleUpdatableFieldsEquals(expected, actual);
        assertScheduleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleAutoGeneratedPropertiesEquals(Schedule expected, Schedule actual) {
        assertThat(actual)
            .as("Verify Schedule auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleUpdatableFieldsEquals(Schedule expected, Schedule actual) {
        assertThat(actual)
            .as("Verify Schedule relevant properties")
            .satisfies(a -> assertThat(a.getScheduleCode()).as("check scheduleCode").isEqualTo(expected.getScheduleCode()))
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getDaysOfWeek()).as("check daysOfWeek").isEqualTo(expected.getDaysOfWeek()))
            .satisfies(a -> assertThat(a.getOccasion()).as("check occasion").isEqualTo(expected.getOccasion()))
            .satisfies(a ->
                assertThat(a.getOccasionFactor())
                    .as("check occasionFactor")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getOccasionFactor())
            )
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduleUpdatableRelationshipsEquals(Schedule expected, Schedule actual) {
        assertThat(actual)
            .as("Verify Schedule relationships")
            .satisfies(a -> assertThat(a.getRoute()).as("check route").isEqualTo(expected.getRoute()));
    }
}
