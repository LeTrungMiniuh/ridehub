package com.ridehub.user.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FileUserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileUserAllPropertiesEquals(FileUser expected, FileUser actual) {
        assertFileUserAutoGeneratedPropertiesEquals(expected, actual);
        assertFileUserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileUserAllUpdatablePropertiesEquals(FileUser expected, FileUser actual) {
        assertFileUserUpdatableFieldsEquals(expected, actual);
        assertFileUserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileUserAutoGeneratedPropertiesEquals(FileUser expected, FileUser actual) {
        assertThat(actual)
            .as("Verify FileUser auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileUserUpdatableFieldsEquals(FileUser expected, FileUser actual) {
        assertThat(actual)
            .as("Verify FileUser relevant properties")
            .satisfies(a -> assertThat(a.getBucket()).as("check bucket").isEqualTo(expected.getBucket()))
            .satisfies(a -> assertThat(a.getObjectKey()).as("check objectKey").isEqualTo(expected.getObjectKey()))
            .satisfies(a -> assertThat(a.getContentType()).as("check contentType").isEqualTo(expected.getContentType()))
            .satisfies(a -> assertThat(a.getSize()).as("check size").isEqualTo(expected.getSize()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileUserUpdatableRelationshipsEquals(FileUser expected, FileUser actual) {
        // empty method
    }
}
