package com.ridehub.promotion.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ConditionByDateAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConditionByDateAllPropertiesEquals(ConditionByDate expected, ConditionByDate actual) {
        assertConditionByDateAutoGeneratedPropertiesEquals(expected, actual);
        assertConditionByDateAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConditionByDateAllUpdatablePropertiesEquals(ConditionByDate expected, ConditionByDate actual) {
        assertConditionByDateUpdatableFieldsEquals(expected, actual);
        assertConditionByDateUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConditionByDateAutoGeneratedPropertiesEquals(ConditionByDate expected, ConditionByDate actual) {
        assertThat(actual)
            .as("Verify ConditionByDate auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConditionByDateUpdatableFieldsEquals(ConditionByDate expected, ConditionByDate actual) {
        assertThat(actual)
            .as("Verify ConditionByDate relevant properties")
            .satisfies(a -> assertThat(a.getSpecificDate()).as("check specificDate").isEqualTo(expected.getSpecificDate()))
            .satisfies(a -> assertThat(a.getWeekday()).as("check weekday").isEqualTo(expected.getWeekday()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConditionByDateUpdatableRelationshipsEquals(ConditionByDate expected, ConditionByDate actual) {
        assertThat(actual)
            .as("Verify ConditionByDate relationships")
            .satisfies(a -> assertThat(a.getPromotion()).as("check promotion").isEqualTo(expected.getPromotion()));
    }
}
