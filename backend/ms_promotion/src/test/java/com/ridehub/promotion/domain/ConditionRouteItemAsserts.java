package com.ridehub.promotion.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ConditionRouteItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConditionRouteItemAllPropertiesEquals(ConditionRouteItem expected, ConditionRouteItem actual) {
        assertConditionRouteItemAutoGeneratedPropertiesEquals(expected, actual);
        assertConditionRouteItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConditionRouteItemAllUpdatablePropertiesEquals(ConditionRouteItem expected, ConditionRouteItem actual) {
        assertConditionRouteItemUpdatableFieldsEquals(expected, actual);
        assertConditionRouteItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConditionRouteItemAutoGeneratedPropertiesEquals(ConditionRouteItem expected, ConditionRouteItem actual) {
        assertThat(actual)
            .as("Verify ConditionRouteItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConditionRouteItemUpdatableFieldsEquals(ConditionRouteItem expected, ConditionRouteItem actual) {
        assertThat(actual)
            .as("Verify ConditionRouteItem relevant properties")
            .satisfies(a -> assertThat(a.getRouteId()).as("check routeId").isEqualTo(expected.getRouteId()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConditionRouteItemUpdatableRelationshipsEquals(ConditionRouteItem expected, ConditionRouteItem actual) {
        assertThat(actual)
            .as("Verify ConditionRouteItem relationships")
            .satisfies(a -> assertThat(a.getCondition()).as("check condition").isEqualTo(expected.getCondition()));
    }
}
