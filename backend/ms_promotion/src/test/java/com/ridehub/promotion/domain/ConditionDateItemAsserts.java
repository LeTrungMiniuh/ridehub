package com.ridehub.promotion.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ConditionDateItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConditionDateItemAllPropertiesEquals(ConditionDateItem expected, ConditionDateItem actual) {
        assertConditionDateItemAutoGeneratedPropertiesEquals(expected, actual);
        assertConditionDateItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConditionDateItemAllUpdatablePropertiesEquals(ConditionDateItem expected, ConditionDateItem actual) {
        assertConditionDateItemUpdatableFieldsEquals(expected, actual);
        assertConditionDateItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConditionDateItemAutoGeneratedPropertiesEquals(ConditionDateItem expected, ConditionDateItem actual) {
        assertThat(actual)
            .as("Verify ConditionDateItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConditionDateItemUpdatableFieldsEquals(ConditionDateItem expected, ConditionDateItem actual) {
        assertThat(actual)
            .as("Verify ConditionDateItem relevant properties")
            .satisfies(a -> assertThat(a.getSpecificDate()).as("check specificDate").isEqualTo(expected.getSpecificDate()))
            .satisfies(a -> assertThat(a.getWeekday()).as("check weekday").isEqualTo(expected.getWeekday()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConditionDateItemUpdatableRelationshipsEquals(ConditionDateItem expected, ConditionDateItem actual) {
        assertThat(actual)
            .as("Verify ConditionDateItem relationships")
            .satisfies(a -> assertThat(a.getCondition()).as("check condition").isEqualTo(expected.getCondition()));
    }
}
