package com.ridehub.promotion.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PromotionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPromotionAllPropertiesEquals(Promotion expected, Promotion actual) {
        assertPromotionAutoGeneratedPropertiesEquals(expected, actual);
        assertPromotionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPromotionAllUpdatablePropertiesEquals(Promotion expected, Promotion actual) {
        assertPromotionUpdatableFieldsEquals(expected, actual);
        assertPromotionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPromotionAutoGeneratedPropertiesEquals(Promotion expected, Promotion actual) {
        assertThat(actual)
            .as("Verify Promotion auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPromotionUpdatableFieldsEquals(Promotion expected, Promotion actual) {
        assertThat(actual)
            .as("Verify Promotion relevant properties")
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getUsageLimit()).as("check usageLimit").isEqualTo(expected.getUsageLimit()))
            .satisfies(a -> assertThat(a.getUsedCount()).as("check usedCount").isEqualTo(expected.getUsedCount()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPromotionUpdatableRelationshipsEquals(Promotion expected, Promotion actual) {
        assertThat(actual)
            .as("Verify Promotion relationships")
            .satisfies(a -> assertThat(a.getBannerImg()).as("check bannerImg").isEqualTo(expected.getBannerImg()));
    }
}
