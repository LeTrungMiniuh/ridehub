package com.ridehub.promotion.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BuyNGetMFreeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBuyNGetMFreeAllPropertiesEquals(BuyNGetMFree expected, BuyNGetMFree actual) {
        assertBuyNGetMFreeAutoGeneratedPropertiesEquals(expected, actual);
        assertBuyNGetMFreeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBuyNGetMFreeAllUpdatablePropertiesEquals(BuyNGetMFree expected, BuyNGetMFree actual) {
        assertBuyNGetMFreeUpdatableFieldsEquals(expected, actual);
        assertBuyNGetMFreeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBuyNGetMFreeAutoGeneratedPropertiesEquals(BuyNGetMFree expected, BuyNGetMFree actual) {
        assertThat(actual)
            .as("Verify BuyNGetMFree auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBuyNGetMFreeUpdatableFieldsEquals(BuyNGetMFree expected, BuyNGetMFree actual) {
        assertThat(actual)
            .as("Verify BuyNGetMFree relevant properties")
            .satisfies(a -> assertThat(a.getBuyN()).as("check buyN").isEqualTo(expected.getBuyN()))
            .satisfies(a -> assertThat(a.getGetM()).as("check getM").isEqualTo(expected.getGetM()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBuyNGetMFreeUpdatableRelationshipsEquals(BuyNGetMFree expected, BuyNGetMFree actual) {
        assertThat(actual)
            .as("Verify BuyNGetMFree relationships")
            .satisfies(a -> assertThat(a.getPromotion()).as("check promotion").isEqualTo(expected.getPromotion()));
    }
}
