package com.ridehub.promotion.domain;

import static com.ridehub.promotion.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PercentOffTotalAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPercentOffTotalAllPropertiesEquals(PercentOffTotal expected, PercentOffTotal actual) {
        assertPercentOffTotalAutoGeneratedPropertiesEquals(expected, actual);
        assertPercentOffTotalAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPercentOffTotalAllUpdatablePropertiesEquals(PercentOffTotal expected, PercentOffTotal actual) {
        assertPercentOffTotalUpdatableFieldsEquals(expected, actual);
        assertPercentOffTotalUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPercentOffTotalAutoGeneratedPropertiesEquals(PercentOffTotal expected, PercentOffTotal actual) {
        assertThat(actual)
            .as("Verify PercentOffTotal auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPercentOffTotalUpdatableFieldsEquals(PercentOffTotal expected, PercentOffTotal actual) {
        assertThat(actual)
            .as("Verify PercentOffTotal relevant properties")
            .satisfies(a -> assertThat(a.getPercent()).as("check percent").isEqualTo(expected.getPercent()))
            .satisfies(a ->
                assertThat(a.getMaxOff()).as("check maxOff").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getMaxOff())
            )
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
            .satisfies(a -> assertThat(a.getDeletedAt()).as("check deletedAt").isEqualTo(expected.getDeletedAt()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPercentOffTotalUpdatableRelationshipsEquals(PercentOffTotal expected, PercentOffTotal actual) {
        assertThat(actual)
            .as("Verify PercentOffTotal relationships")
            .satisfies(a -> assertThat(a.getPromotion()).as("check promotion").isEqualTo(expected.getPromotion()));
    }
}
